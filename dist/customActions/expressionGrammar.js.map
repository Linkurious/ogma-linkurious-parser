{"version":3,"file":"expressionGrammar.js","sourceRoot":"","sources":["../../src/customActions/expressionGrammar.ts"],"names":[],"mappings":"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","sourcesContent":["// Generated automatically by nearley, version 2.19.0\n// http://github.com/Hardmath123/nearley\n// Bypasses TS6133. Allow declared but unused functions.\n/* eslint-disable */\nfunction id(d: any[]): any {\n  return d[0];\n}\n\n// @ts-ignore\nconst format = (indexes = {}) => d => {\n  const info = {};\n  for (const key in indexes) {\n    // @ts-ignore\n    const name = d[indexes[key]];\n    if (key === 'variable' && name !== undefined) {\n      name.value = name.value.toLowerCase();\n    }\n    // @ts-ignore\n    info[key] = name || {\n      // @ts-ignore\n      offset: d.map(el => el.length || el.value.length).reduce((a, b) => a + b),\n      value: ''\n    };\n  }\n  return info;\n};\n// @ts-ignore\nconst withOffset = (d, l) => ({\n  offset: l,\n  value: d[0]\n});\n// @ts-ignore\nconst identifier = d => d[0] + d[1].join('');\n\ninterface NearleyToken {\n  value: any;\n  [key: string]: any;\n}\n\ninterface NearleyLexer {\n  reset: (chunk: string, info: any) => void;\n  next: () => NearleyToken | undefined;\n  save: () => any;\n  formatError: (token: NearleyToken) => string;\n  has: (tokenType: string) => boolean;\n}\n\ninterface NearleyRule {\n  name: string;\n  symbols: NearleySymbol[];\n  postprocess?: (d: any[], loc?: number, reject?: {}) => any;\n}\n\ntype NearleySymbol = string | {literal: any} | {test: (token: any) => boolean};\n\ninterface Grammar {\n  Lexer: NearleyLexer | undefined;\n  ParserRules: NearleyRule[];\n  ParserStart: string;\n}\n\nconst grammar: Grammar = {\n  Lexer: undefined,\n  ParserRules: [\n    {name: 'dqstring$ebnf$1', symbols: []},\n    {\n      name: 'dqstring$ebnf$1',\n      symbols: ['dqstring$ebnf$1', 'dstrchar'],\n      postprocess: d => d[0].concat([d[1]])\n    },\n    {\n      name: 'dqstring',\n      symbols: [{literal: '\"'}, 'dqstring$ebnf$1', {literal: '\"'}],\n      postprocess: function(d) {\n        return d[1].join('');\n      }\n    },\n    {name: 'sqstring$ebnf$1', symbols: []},\n    {\n      name: 'sqstring$ebnf$1',\n      symbols: ['sqstring$ebnf$1', 'sstrchar'],\n      postprocess: d => d[0].concat([d[1]])\n    },\n    {\n      name: 'sqstring',\n      symbols: [{literal: \"'\"}, 'sqstring$ebnf$1', {literal: \"'\"}],\n      postprocess: function(d) {\n        return d[1].join('');\n      }\n    },\n    {name: 'btstring$ebnf$1', symbols: []},\n    {\n      name: 'btstring$ebnf$1',\n      symbols: ['btstring$ebnf$1', /[^`]/],\n      postprocess: d => d[0].concat([d[1]])\n    },\n    {\n      name: 'btstring',\n      symbols: [{literal: '`'}, 'btstring$ebnf$1', {literal: '`'}],\n      postprocess: function(d) {\n        return d[1].join('');\n      }\n    },\n    {name: 'dstrchar', symbols: [/[^\\\\\"\\n]/], postprocess: id},\n    {\n      name: 'dstrchar',\n      symbols: [{literal: '\\\\'}, 'strescape'],\n      postprocess: function(d) {\n        return JSON.parse('\"' + d.join('') + '\"');\n      }\n    },\n    {name: 'sstrchar', symbols: [/[^\\\\'\\n]/], postprocess: id},\n    {\n      name: 'sstrchar',\n      symbols: [{literal: '\\\\'}, 'strescape'],\n      postprocess: function(d) {\n        return JSON.parse('\"' + d.join('') + '\"');\n      }\n    },\n    {\n      name: 'sstrchar$string$1',\n      symbols: [{literal: '\\\\'}, {literal: \"'\"}],\n      postprocess: d => d.join('')\n    },\n    {\n      name: 'sstrchar',\n      symbols: ['sstrchar$string$1'],\n      postprocess: function() {\n        return \"'\";\n      }\n    },\n    {name: 'strescape', symbols: [/[\"\\\\\\/bfnrt]/], postprocess: id},\n    {\n      name: 'strescape',\n      symbols: [{literal: 'u'}, /[a-fA-F0-9]/, /[a-fA-F0-9]/, /[a-fA-F0-9]/, /[a-fA-F0-9]/],\n      postprocess: function(d) {\n        return d.join('');\n      }\n    },\n    {name: 'expression', symbols: ['name'], postprocess: format({variable: 0})},\n    {name: 'expression', symbols: ['name', 'c'], postprocess: format({variable: 0, itemType: 2})},\n    {\n      name: 'expression',\n      symbols: ['name', 'c', 'name'],\n      postprocess: format({variable: 0, itemType: 2})\n    },\n    {name: 'expression', symbols: ['name', 'd'], postprocess: format({variable: 0, property: 2})},\n    {\n      name: 'expression',\n      symbols: ['name', 'd', 'name'],\n      postprocess: format({variable: 0, property: 2})\n    },\n    {name: 'expression', symbols: ['_p'], postprocess: format({variable: 1})},\n    {name: 'expression', symbols: ['_p', 'name'], postprocess: format({variable: 1})},\n    {name: 'expression', symbols: ['_p', 'name', 'p_'], postprocess: format({variable: 1})},\n    {\n      name: 'expression',\n      symbols: ['_p', 'name', 'c'],\n      postprocess: format({variable: 1, itemType: 3})\n    },\n    {\n      name: 'expression',\n      symbols: ['_p', 'name', 'c', 'name'],\n      postprocess: format({variable: 1, itemType: 3})\n    },\n    {\n      name: 'expression',\n      symbols: ['_p', 'name', 'c', 'name', 'p_'],\n      postprocess: format({variable: 1, itemType: 3})\n    },\n    {\n      name: 'expression',\n      symbols: ['_p', 'name', 'p_', 'd'],\n      postprocess: format({variable: 1, property: 4})\n    },\n    {\n      name: 'expression',\n      symbols: ['_p', 'name', 'p_', 'd', 'name'],\n      postprocess: format({variable: 1, property: 4})\n    },\n    {\n      name: 'expression',\n      symbols: ['_p', 'name', 'c', 'name', 'p_', 'd'],\n      postprocess: format({variable: 1, itemType: 3, property: 6})\n    },\n    {\n      name: 'expression',\n      symbols: ['_p', 'name', 'c', 'name', 'p_', 'd', 'name'],\n      postprocess: format({variable: 1, itemType: 3, property: 6})\n    },\n    {name: 'c', symbols: [{literal: ':'}], postprocess: id},\n    {name: 'd', symbols: [{literal: '.'}], postprocess: id},\n    {name: '_p', symbols: [{literal: '('}], postprocess: id},\n    {name: 'p_', symbols: [{literal: ')'}], postprocess: id},\n    {name: 'name', symbols: ['identifier'], postprocess: withOffset},\n    {name: 'name', symbols: ['qstring'], postprocess: withOffset},\n    {name: 'identifier$ebnf$1', symbols: []},\n    {\n      name: 'identifier$ebnf$1',\n      symbols: ['identifier$ebnf$1', /[a-zA-Z$_0-9]/],\n      postprocess: d => d[0].concat([d[1]])\n    },\n    {name: 'identifier', symbols: [/[a-zA-Z$_]/, 'identifier$ebnf$1'], postprocess: identifier},\n    {name: 'qstring', symbols: ['dqstring'], postprocess: id},\n    {name: 'qstring', symbols: ['sqstring'], postprocess: id}\n  ],\n  ParserStart: 'expression'\n};\n\nexport default grammar\n"]}