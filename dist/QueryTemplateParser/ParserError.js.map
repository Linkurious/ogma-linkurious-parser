{"version":3,"file":"ParserError.js","sourceRoot":"","sources":["../../src/QueryTemplateParser/ParserError.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * LINKURIOUS CONFIDENTIAL\n * Copyright Linkurious SAS 2012 - 2019\n *\n * - Created on 2019-02-08.\n */\nimport {GenericObject} from '@linkurious/rest-client';\n\nimport * as tools from '../tools/tools';\n\nexport enum Level {\n  TEMPLATE = 'template',\n  FIELD = 'field',\n  KEY = 'key',\n  TYPE = 'type',\n  OPTIONS = 'options',\n  DATA = 'data'\n}\n\nexport enum Message {\n  TEMPLATE_NOT_CLOSED = 'Template must end with \"}}\", e.g. {{\"field1\":string}}.',\n  NO_TEMPLATE_FOUND = 'This query must contain at least one template.',\n  EMPTY_NAME = 'Name cannot be empty, e.g. {{\"field1\":string}}.',\n  SINGLE_LINE_NAME = 'Name must not contain line breaks.',\n  MISSING_OPTIONS = '\"options\" must not be undefined.',\n  EMPTY_OPTIONS = 'Type \"$type\" accepts options $options.',\n  AT_MOST_2_NODE_INPUT = 'Templates accept at most 2 \"node\" input.',\n  AT_MOST_1_NODE_SET_INPUT = 'Templates accept at most 1 \"nodeset\" input.',\n  CONFLICTING_TYPES = '\"$key\" cannot be both of type \"$existingType\" and of type \"$newType\".',\n  CONFLICTING_OPTIONS = '\"$key\" cannot have both options \"$existingOptions\" and \"$newOptions\".',\n  MIXED_NODE_NODE_SET_INPUT = 'Templates do not accept a mix of nodes and nodeset inputs.',\n  BUG_CANNOT_PARSE_TEMPLATE_KEY = 'ParseTemplateKey was invoked on an unchecked query.',\n  ENV_INPUT_WITHOUT_GRAPH_INPUT = 'Templates do not accept an \"env\" input without a \"node\" or \"nodeset\" input.',\n  KEY_NOT_QUOTED = 'Name of template should be surrounded by quotes, e.g. {{\"field1\":string}}.',\n  TYPE_MISSING = 'Name should be followed by \":\" and type, e.g. {{\"field1\":string}}.',\n  INVALID_TEMPLATE_FORMAT = 'The format of $template is invalid.',\n  MISSING_DATA = 'Template data must contain the $type \"$field\".',\n  PATTERN_MATCH_FAILED = '\"$key\" must match pattern $pattern.',\n  INVALID_DATE = '\"$key\" must be a valid date.',\n  INVALID_TIMEZONE = '\"$key\" must be a valid timezone.',\n  NOT_BEFORE = '\"$key\" must be after $min.',\n  NOT_AFTER = '\"$key\" must be before $max.',\n  NOT_UNIQUE_ENUM = 'Enum values must be unique.'\n}\n\nexport class ParserError extends Error {\n  public readonly level: Level;\n\n  private constructor(level: Level, message: string) {\n    super(message);\n    this.level = level;\n  }\n\n  public static errorMessage(message: string, data: GenericObject<string> = {}): string {\n    let build = message;\n    tools.keys(data).forEach((key) => {\n      build = build.replace(new RegExp('[$]' + key, 'g'), data[key]);\n    });\n    return build;\n  }\n\n  public static template(message: Message, data: GenericObject<string> = {}): ParserError {\n    return new ParserError(Level.TEMPLATE, ParserError.errorMessage(message, data));\n  }\n\n  public static field(message: Message, data: GenericObject<string> = {}): ParserError {\n    return new ParserError(Level.FIELD, ParserError.errorMessage(message, data));\n  }\n\n  public static key(message: Message, data: GenericObject<string> = {}): ParserError {\n    return new ParserError(Level.KEY, ParserError.errorMessage(message, data));\n  }\n\n  public static type(message: Message, data: GenericObject<string> = {}): ParserError {\n    return new ParserError(Level.TYPE, ParserError.errorMessage(message, data));\n  }\n\n  public static options(message: Message, data: GenericObject<string> = {}): ParserError {\n    return new ParserError(Level.OPTIONS, ParserError.errorMessage(message, data));\n  }\n\n  public static data(message: Message, data: GenericObject<string> = {}): ParserError {\n    return new ParserError(Level.DATA, ParserError.errorMessage(message, data));\n  }\n}\n"]}