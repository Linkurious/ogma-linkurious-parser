{"version":3,"file":"DateChecker.js","sourceRoot":"","sources":["../../src/QueryTemplateParser/DateChecker.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * LINKURIOUS CONFIDENTIAL\n * Copyright Linkurious SAS 2012 - 2019\n *\n * - Created on 2019-02-01.\n */\nimport {FieldDefinition, Valcheck} from 'valcheck/lib/valcheck/Valcheck';\nimport {DateTemplateFormat, DateTemplate, TemplateFieldType} from '@linkurious/rest-client';\n\nimport {RawFieldChecker} from './RawFieldChecker';\nimport {Message, ParserError} from './ParserError';\n\nimport {InputSerialization, TemplateCheckerAttributes, TemplateDataValue} from './index';\n\nexport class DateChecker<E> extends RawFieldChecker<E> {\n  constructor(check: Valcheck<E>) {\n    super(check);\n  }\n\n  public get attributes(): TemplateCheckerAttributes {\n    return {\n      type: TemplateFieldType.DATE,\n      shorthand: 'format',\n      defaultSerializer: InputSerialization.NATIVE_DATE\n    };\n  }\n\n  protected get defaultFormat(): {iso: string; rx: RegExp} {\n    return {\n      iso: 'yyyy-MM-dd',\n      rx: /^\\d{4}[-]\\d{2}[-]\\d{2}$/\n    };\n  }\n\n  /**\n   * Check is a date is between start and end.\n   *\n   * @param start\n   * @param end\n   */\n  static between<E>(start?: string, end?: string): FieldDefinition<E> {\n    return {\n      check: (key: string, value: unknown) => {\n        const date = new Date(value as string);\n        const min = start ? new Date(start).getTime() : -Infinity;\n        const max = end ? new Date(end).getTime() : +Infinity;\n        if (min > date.getTime()) {\n          throw ParserError.options(Message.NOT_BEFORE, {key: key, min: start + ''});\n        }\n\n        if (max < date.getTime()) {\n          // We know that end is defined because max is not infinity\n          throw ParserError.options(Message.NOT_AFTER, {key: key, max: end + ''});\n        }\n      }\n    };\n  }\n\n  /**\n   * TemplateField json-options valcheck field definition.\n   */\n  protected getOptionsFieldDefinition(): FieldDefinition<E> {\n    const checkDate = (key: string, value: unknown) => {\n      this.check.string(key, value, true);\n      if (!this.defaultFormat.rx.test(value as string)) {\n        throw ParserError.options(Message.PATTERN_MATCH_FAILED, {\n          key: key,\n          pattern: this.defaultFormat.iso\n        });\n      }\n\n      const dateCandidate = Date.parse(value as string);\n      if (dateCandidate !== dateCandidate) {\n        // IE compatible NaN check\n        throw ParserError.options(Message.INVALID_DATE, {key: key});\n      }\n    };\n    const acceptedFormats: DateTemplateFormat[] = Object.values(DateTemplateFormat);\n    const properties = {\n      format: {required: true, values: acceptedFormats},\n      min: {required: false, check: checkDate},\n      max: {required: false, check: checkDate},\n      default: {required: false, check: checkDate}\n    };\n    return {\n      required: true,\n      properties: properties,\n      check: (key: string, value: unknown) => {\n        this.check.property(key, value, {properties: properties});\n        const options = value as {format: string; min?: string; max?: string; default: string};\n\n        this.check.properties(\n          key,\n          options,\n          {\n            min: DateChecker.between(undefined, options.max),\n            max: DateChecker.between(options.min, undefined),\n            default: DateChecker.between(options.min, options.max)\n          },\n          'inclusive'\n        );\n      }\n    };\n  }\n\n  /**\n   * Template input value field definition.\n   *\n   * @param options\n   */\n  protected getInputFieldDefinition(\n    options: DateTemplate['options'] = {} as DateTemplate['options']\n  ): FieldDefinition<E> {\n    return {\n      check: (key: string, value: unknown) => {\n        this.check.type(key, value, 'string');\n        const date = new Date(value as string);\n        this.check.date(key, date, false);\n        this.check.date(key, value, true);\n        this.check.property(\n          key,\n          value,\n          DateChecker.between(options.min as string, options.max as string)\n        );\n      }\n    };\n  }\n\n  /**\n   * Pad single digits with '0'.\n   *\n   * @param n\n   */\n  private static padDigit(n: number): string {\n    if (n < 10) {\n      return '0' + n;\n    }\n    return n + '';\n  }\n\n  static defaultFormatting(date: Date, format: string): string {\n    return format\n      .replace(/y{4}/i, date.getUTCFullYear() + '')\n      .replace(/(^|[^:])m{2}/i, '$1' + DateChecker.padDigit(date.getUTCMonth() + 1))\n      .replace(/d{2}/i, DateChecker.padDigit(date.getUTCDate()))\n      .replace('hh', DateChecker.padDigit(date.getUTCHours()))\n      .replace(/([:])m{2}/, '$1' + DateChecker.padDigit(date.getUTCMinutes()))\n      .replace('ss', DateChecker.padDigit(date.getUTCSeconds()));\n  }\n\n  /**\n   * Format `date` to string\n   *\n   * @param date\n   * @param format\n   * @param defaultFormatISO\n   */\n  static formatDate(date: Date, format: string, defaultFormatISO: string): string {\n    switch (format) {\n      case DateTemplateFormat.TIMESTAMP:\n        return date.getTime() / 1000 + '';\n      case DateTemplateFormat.TIMESTAMP_MS:\n        return date.getTime() + '';\n      case DateTemplateFormat.ISO:\n        return DateChecker.defaultFormatting(date, defaultFormatISO);\n      default:\n        return DateChecker.defaultFormatting(date, format);\n    }\n  }\n\n  /**\n   * Normalize input to be inserted in a graph query.\n   */\n  protected normalizeInput(\n    input: string,\n    options: DateTemplate['options']\n  ): {value: TemplateDataValue; serializer: InputSerialization} {\n    if (options.format === DateTemplateFormat.NATIVE) {\n      //only use the date part of the ISO string\n      const [date] = input.split('T');\n      return {value: date, serializer: InputSerialization.NATIVE_DATE};\n    } else {\n      const formattedDate = DateChecker.formatDate(\n        new Date(input),\n        options.format,\n        this.defaultFormat.iso\n      );\n      return {value: formattedDate, serializer: InputSerialization.STRING};\n    }\n  }\n}\n"]}