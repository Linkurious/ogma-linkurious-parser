{"version":3,"file":"RawFieldChecker.js","sourceRoot":"","sources":["../../src/QueryTemplateParser/RawFieldChecker.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * LINKURIOUS CONFIDENTIAL\n * Copyright Linkurious SAS 2012 - 2019\n *\n * - Created on 21-01-2019.\n */\n// external libs\nimport {FieldDefinition, Valcheck} from 'valcheck/lib/valcheck/Valcheck';\nimport {Template, TemplateFieldType} from '@linkurious/rest-client';\n\nimport * as tools from '../tools/tools';\n\n// local libs\nimport {Message, ParserError} from './ParserError';\n\nimport {InputSerialization, TemplateCheckerAttributes, TemplateDataValue} from './index';\n\nexport abstract class RawFieldChecker<E> {\n  protected check: Valcheck<E>;\n\n  protected constructor(check: Valcheck<E>) {\n    this.check = check;\n  }\n\n  public abstract get attributes(): TemplateCheckerAttributes;\n\n  public needOptions(nodeCategories?: string[]): boolean {\n    return this.getOptionsFieldDefinition(nodeCategories).required || false;\n  }\n\n  /**\n   * TemplateField json-options valcheck field definition.\n   *\n   * @param nodeCategories\n   */\n  protected abstract getOptionsFieldDefinition(nodeCategories?: string[]): FieldDefinition<E>;\n\n  /**\n   * Template input value field definition.\n   *\n   * @param options\n   */\n  protected abstract getInputFieldDefinition(options?: Template['options']): FieldDefinition<E>;\n\n  /**\n   * Normalize input to be inserted in a graph query.\n   *\n   * @param input\n   * @param options\n   */\n  protected normalizeInput(\n    input: TemplateDataValue,\n    options?: Template['options']\n  ): {value: TemplateDataValue; serializer: InputSerialization} {\n    return {value: input, serializer: this.attributes.defaultSerializer};\n  }\n\n  /**\n   * Transform the parsed json-options necessary.\n   */\n  protected normalizeOptions(options: {}): Template['options'] {\n    return options;\n  }\n\n  /**\n   * Parse template fields json-options.\n   *\n   * @param jsonOptions\n   * @param nodeCategories\n   */\n  public parseJsonOptions(\n    jsonOptions: string,\n    nodeCategories?: string[]\n  ): Template['options'] | undefined {\n    const definition = this.getOptionsFieldDefinition(nodeCategories);\n\n    if (jsonOptions === undefined) {\n      // Json options are optional, we don't try to parse them\n      return undefined;\n    }\n\n    let parsedOptions;\n    const validOptions = tools.map(definition.properties, (v, k) => `\"${k}\"`).join(', ');\n    const type = this.attributes.type;\n    try {\n      parsedOptions = JSON.parse(jsonOptions);\n    } catch (error) {\n      const data = {type: type, options: validOptions};\n      if (!jsonOptions.length) {\n        throw ParserError.template(Message.EMPTY_OPTIONS, data);\n      } else {\n        throw ParserError.options(Message.EMPTY_OPTIONS, data);\n      }\n    }\n\n    let normalizedOptions;\n    if (this.check.getType(parsedOptions) === 'object') {\n      if (tools.keys(parsedOptions).length === 0) {\n        throw ParserError.options(Message.EMPTY_OPTIONS, {type: type, options: validOptions});\n      }\n      normalizedOptions = parsedOptions;\n    } else {\n      normalizedOptions = {[this.attributes.shorthand]: parsedOptions};\n    }\n    this.check.property('options', normalizedOptions, definition);\n    return this.normalizeOptions(normalizedOptions);\n  }\n\n  /**\n   * Validate a template data value.\n   *\n   * @param input\n   * @param quote   Vendor specific methods to validate ids and serialize values\n   * @param options\n   * @throws {Error} If template data value is not valid\n   */\n  public validateInput(\n    input: {key: string; value: unknown},\n    quote?: (data: TemplateDataValue, type: InputSerialization) => string,\n    options?: Template['options']\n  ): string {\n    this.check.property(input.key, input.value, this.getInputFieldDefinition(options));\n    const normalizedInput = this.normalizeInput(input.value as TemplateFieldType, options);\n    if (typeof quote === 'function') {\n      return quote(normalizedInput.value, normalizedInput.serializer);\n    } else {\n      return normalizedInput.value + '';\n    }\n  }\n}\n"]}