{"version":3,"file":"NumberChecker.js","sourceRoot":"","sources":["../../src/QueryTemplateParser/NumberChecker.ts"],"names":[],"mappings":";AAAA;;;;;GAKG;;;;;;;;;;;;;;;AAGH,uDAAyF;AAEzF,qDAAkD;AAElD,iCAAsE;AAEtE;IAAsC,iCAAkB;IACtD,uBAAY,KAAkB;eAC5B,kBAAM,KAAK,CAAC;IACd,CAAC;IAED,sBAAW,qCAAU;aAArB;YACE,OAAO;gBACL,IAAI,EAAE,+BAAiB,CAAC,MAAM;gBAC9B,SAAS,EAAE,SAAS;gBACpB,iBAAiB,EAAE,0BAAkB,CAAC,MAAM;aAC7C,CAAC;QACJ,CAAC;;;OAAA;IAED;;OAEG;IACO,iDAAyB,GAAnC;QAAA,iBAyBC;QAxBC,IAAM,UAAU,GAAsC;YACpD,OAAO,EAAE,EAAC,KAAK,EAAE,QAAQ,EAAC;YAC1B,GAAG,EAAE,EAAC,KAAK,EAAE,QAAQ,EAAC;YACtB,GAAG,EAAE,EAAC,KAAK,EAAE,QAAQ,EAAC;YACtB,WAAW,EAAE,EAAC,KAAK,EAAE,QAAQ,EAAC;SAC/B,CAAC;QACF,OAAO;YACL,QAAQ,EAAE,KAAK;YACf,UAAU,EAAE,UAAU;YACtB,KAAK,EAAE,UAAC,GAAW,EAAE,KAAc;gBACjC,KAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,EAAE,KAAK,EAAE,EAAC,UAAU,EAAE,UAAU,EAAC,CAAC,CAAC;gBAC1D,IAAM,OAAO,GAAG,KAAuD,CAAC;gBACxE,KAAI,CAAC,KAAK,CAAC,UAAU,CACnB,GAAG,EACH,OAAO,EACP;oBACE,GAAG,EAAE,EAAC,KAAK,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,EAAC;oBACrC,GAAG,EAAE,EAAC,KAAK,EAAE,CAAC,QAAQ,EAAE,SAAS,EAAE,OAAO,CAAC,GAAG,CAAC,EAAC;oBAChD,OAAO,EAAE,EAAC,KAAK,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,EAAC;iBACvD,EACD,WAAW,CACZ,CAAC;YACJ,CAAC;SACF,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACO,+CAAuB,GAAjC,UAAkC,OAAkC;QAClE,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;QACxB,OAAO;YACL,KAAK,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC;SAC5C,CAAC;IACJ,CAAC;IACH,oBAAC;AAAD,CAAC,AAtDD,CAAsC,iCAAe,GAsDpD;AAtDY,sCAAa","sourcesContent":["/**\n * LINKURIOUS CONFIDENTIAL\n * Copyright Linkurious SAS 2012 - 2019\n *\n * - Created on 2019-02-01.\n */\n\nimport {FieldDefinition, Valcheck} from 'valcheck/lib/valcheck/Valcheck';\nimport {GenericObject, NumberTemplate, TemplateFieldType} from '@linkurious/rest-client';\n\nimport {RawFieldChecker} from './RawFieldChecker';\n\nimport {InputSerialization, TemplateCheckerAttributes} from './index';\n\nexport class NumberChecker<E> extends RawFieldChecker<E> {\n  constructor(check: Valcheck<E>) {\n    super(check);\n  }\n\n  public get attributes(): TemplateCheckerAttributes {\n    return {\n      type: TemplateFieldType.NUMBER,\n      shorthand: 'default',\n      defaultSerializer: InputSerialization.NUMBER\n    };\n  }\n\n  /**\n   * TemplateField json-options valcheck field definition.\n   */\n  protected getOptionsFieldDefinition(): FieldDefinition<E> {\n    const properties: GenericObject<FieldDefinition<E>> = {\n      default: {check: 'number'},\n      min: {check: 'number'},\n      max: {check: 'number'},\n      placeholder: {check: 'string'}\n    };\n    return {\n      required: false,\n      properties: properties,\n      check: (key: string, value: unknown) => {\n        this.check.property(key, value, {properties: properties});\n        const options = value as {default?: number; min?: number; max?: number};\n        this.check.properties(\n          key,\n          options,\n          {\n            max: {check: ['number', options.min]},\n            min: {check: ['number', undefined, options.max]},\n            default: {check: ['number', options.min, options.max]}\n          },\n          'inclusive'\n        );\n      }\n    };\n  }\n\n  /**\n   * Template input value field definition.\n   *\n   * @param options\n   */\n  protected getInputFieldDefinition(options: NumberTemplate['options']): FieldDefinition<E> {\n    options = options || {};\n    return {\n      check: ['number', options.min, options.max]\n    };\n  }\n}\n"]}