{"version":3,"file":"DateTimeChecker.js","sourceRoot":"","sources":["../../src/QueryTemplateParser/DateTimeChecker.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AASA,uDAKiC;AAEjC,oDAAwC;AAExC,6CAAmD;AACnD,6CAA0C;AAC1C,qDAAkD;AAElD,iCAAyF;AAEzF;IAAwC,mCAAkB;IAMxD,yBAAY,KAAkB;QAA9B,YACE,kBAAM,KAAK,CAAC,SACb;QAPgB,mBAAa,GAAG;YAC/B,GAAG,EAAE,qBAAqB;YAC1B,EAAE,EAAE,iDAAiD;SACtD,CAAC;;IAIF,CAAC;IAED,sBAAW,uCAAU;aAArB;YACE,OAAO;gBACL,IAAI,EAAE,+BAAiB,CAAC,SAAS;gBACjC,SAAS,EAAE,QAAQ;gBACnB,iBAAiB,EAAE,0BAAkB,CAAC,gBAAgB;aACvD,CAAC;QACJ,CAAC;;;OAAA;IAED;;OAEG;IACO,0CAAgB,GAA1B,UAA2B,OAAoC;QAC7D,IAAM,OAAO,GAA0B,EAAE,CAAC;QAE1C,IAAM,mBAAmB,GAA6C,CAAC,KAAK,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;QAChG,KAAkB,UAAmB,EAAnB,2CAAmB,EAAnB,iCAAmB,EAAnB,IAAmB,EAAE;YAAlC,IAAM,GAAG,4BAAA;YACZ,IAAI,OAAO,CAAC,GAAG,CAAC,KAAK,SAAS,EAAE;gBAC9B,0FAA0F;gBAC1F,6EAA6E;gBAC7E,OAAO,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAW,EAAE,OAAO,CAAC,QAAkB,CAAC,CAAC;aACtF;SACF;QAED,OAAO,KAAK,CAAC,QAAQ,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IAC1C,CAAC;IAED;;;;OAIG;IACK,sCAAY,GAApB,UAAqB,IAAY,EAAE,QAAc;QAAd,yBAAA,EAAA,cAAc;QAC/C,sEAAsE;QACtE,OAAO,IAAI,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC;IACjD,CAAC;IAED;;;;OAIG;IACK,sCAAY,GAApB,UAAqB,IAAY,EAAE,QAAgB;QACjD,qEAAqE;QACrE,IAAI,QAAQ,KAAK,GAAG,EAAE;YACpB,oCAAoC;YACpC,OAAO,IAAI,CAAC;SACb;QAED,uEAAuE;QACvE,2CAA2C;QAC3C,IAAM,YAAY,GAAG,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;QAC1D,IAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;QAC5F,IAAI,GAAG,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACzD,OAAO,IAAI,GAAG,QAAQ,CAAC;IACzB,CAAC;IAED;;OAEG;IACO,wCAAc,GAAxB,UACE,KAAa,EACb,OAAoC;QAEpC,IAAM,QAAQ,GAAG,OAAO,CAAC,QAAkB,CAAC;QAC5C,IAAI,OAAO,CAAC,MAAM,KAAK,oCAAsB,CAAC,MAAM,EAAE;YACpD,IAAI,OAAO,CAAC,QAAQ,EAAE;gBACpB,0FAA0F;gBAC1F,2CAA2C;gBAC3C,6EAA6E;gBAC7E,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;aAC5C;iBAAM;gBACL,8FAA8F;gBAC9F,uEAAuE;gBACvE,IAAM,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;gBAChD,IAAI,QAAQ,KAAK,GAAG,EAAE;oBACpB,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;iBAC5B;aACF;YACD,OAAO,EAAC,KAAK,EAAE,KAAK,EAAE,UAAU,EAAE,0BAAkB,CAAC,gBAAgB,EAAC,CAAC;SACxE;aAAM;YACL,IAAM,aAAa,GAAG,yBAAW,CAAC,UAAU,CAC1C,IAAI,IAAI,CAAC,KAAK,CAAC,EACf,OAAO,CAAC,MAAM,EACd,IAAI,CAAC,aAAa,CAAC,GAAG,CACvB,CAAC;YACF,OAAO,EAAC,KAAK,EAAE,aAAa,EAAE,UAAU,EAAE,0BAAkB,CAAC,MAAM,EAAC,CAAC;SACtE;IACH,CAAC;IAED;;OAEG;IACO,mDAAyB,GAAnC;QAAA,iBAgEC;QA/DC,qDAAqD;QACrD,IAAM,SAAS,GAAG,UAAC,GAAW,EAAE,KAAc;YAC5C,KAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;YACpC,IAAI,CAAC,KAAI,CAAC,aAAa,CAAC,EAAE,CAAC,IAAI,CAAC,KAAe,CAAC,EAAE;gBAChD,MAAM,yBAAW,CAAC,OAAO,CAAC,qBAAO,CAAC,oBAAoB,EAAE;oBACtD,GAAG,EAAE,GAAG;oBACR,OAAO,EAAE,KAAI,CAAC,aAAa,CAAC,GAAG;iBAChC,CAAC,CAAC;aACJ;YAED,IAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,KAAe,CAAC,CAAC;YAClD,IAAI,aAAa,KAAK,aAAa,EAAE;gBACnC,0BAA0B;gBAC1B,MAAM,yBAAW,CAAC,OAAO,CAAC,qBAAO,CAAC,YAAY,EAAE,EAAC,GAAG,EAAE,GAAG,EAAC,CAAC,CAAC;aAC7D;QACH,CAAC,CAAC;QAEF,IAAM,eAAe,GAA6B,MAAM,CAAC,MAAM,CAAC,oCAAsB,CAAC,CAAC;QACxF,IAAM,UAAU,GAAG;YACjB,MAAM,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,eAAe,EAAC;YACjD,GAAG,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE,SAAS,EAAC;YACxC,GAAG,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE,SAAS,EAAC;YACxC,OAAO,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE,SAAS,EAAC;YAC5C,QAAQ,EAAE;gBACR,QAAQ,EAAE,KAAK;gBACf,KAAK,EAAE,UAAC,GAAW,EAAE,KAAc;oBACjC,IAAM,eAAe,GAAG,eAAe,CAAC;oBACxC,IAAM,UAAU,GAAG,6BAA6B,CAAC;oBACjD,KAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;oBACpC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAe,CAAC,EAAE;wBACrC,MAAM,yBAAW,CAAC,OAAO,CAAC,qBAAO,CAAC,oBAAoB,EAAE;4BACtD,GAAG,EAAE,GAAG;4BACR,OAAO,EAAE,eAAe;yBACzB,CAAC,CAAC;qBACJ;oBACD,sEAAsE;oBACtE,IAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,yBAAyB,GAAG,KAAK,CAAC,CAAC;oBACpE,IAAI,aAAa,KAAK,aAAa,EAAE;wBACnC,0BAA0B;wBAC1B,MAAM,yBAAW,CAAC,OAAO,CAAC,qBAAO,CAAC,gBAAgB,EAAE,EAAC,GAAG,EAAE,GAAG,EAAC,CAAC,CAAC;qBACjE;gBACH,CAAC;aACF;SACF,CAAC;QACF,OAAO;YACL,QAAQ,EAAE,IAAI;YACd,UAAU,EAAE,UAAU;YACtB,KAAK,EAAE,UAAC,GAAW,EAAE,KAAc;gBACjC,KAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,EAAE,KAAK,EAAE,EAAC,UAAU,EAAE,UAAU,EAAC,CAAC,CAAC;gBAC1D,IAAM,OAAO,GAAG,KAAsE,CAAC;gBAEvF,KAAI,CAAC,KAAK,CAAC,UAAU,CACnB,GAAG,EACH,OAAO,EACP;oBACE,GAAG,EAAE,yBAAW,CAAC,OAAO,CAAC,SAAS,EAAE,OAAO,CAAC,GAAG,CAAC;oBAChD,GAAG,EAAE,yBAAW,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,SAAS,CAAC;oBAChD,OAAO,EAAE,yBAAW,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC;iBACvD,EACD,WAAW,CACZ,CAAC;YACJ,CAAC;SACF,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACO,iDAAuB,GAAjC,UACE,OAAwE;QAD1E,iBAgBC;QAfC,wBAAA,EAAA,UAAuC,EAAiC;QAExE,OAAO;YACL,KAAK,EAAE,UAAC,GAAW,EAAE,KAAc;gBACjC,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;gBACtC,IAAM,IAAI,GAAG,IAAI,IAAI,CAAC,KAAe,CAAC,CAAC;gBACvC,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;gBAClC,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;gBAClC,KAAI,CAAC,KAAK,CAAC,QAAQ,CACjB,GAAG,EACH,KAAK,EACL,yBAAW,CAAC,OAAO,CAAC,OAAO,CAAC,GAAa,EAAE,OAAO,CAAC,GAAa,CAAC,CAClE,CAAC;YACJ,CAAC;SACF,CAAC;IACJ,CAAC;IACH,sBAAC;AAAD,CAAC,AA9LD,CAAwC,iCAAe,GA8LtD;AA9LY,0CAAe","sourcesContent":["/**\n * LINKURIOUS CONFIDENTIAL\n * Copyright Linkurious SAS 2012 - 2019\n *\n * - Created on 2019-02-01.\n */\n// external libs\n// local libs\nimport {FieldDefinition, Valcheck} from 'valcheck/lib/valcheck/Valcheck';\nimport {\n  DatetimeTemplateFormat,\n  DatetimeTemplate,\n  TemplateFieldType,\n  GenericObject\n} from '@linkurious/rest-client';\n\nimport * as tools from '../tools/tools';\n\nimport {Message, ParserError} from './ParserError';\nimport {DateChecker} from './DateChecker';\nimport {RawFieldChecker} from './RawFieldChecker';\n\nimport {InputSerialization, TemplateCheckerAttributes, TemplateDataValue} from './index';\n\nexport class DateTimeChecker<E> extends RawFieldChecker<E> {\n  private readonly defaultFormat = {\n    iso: 'YYYY-MM-DDThh:mm:ss',\n    rx: /^\\d{4}[-]\\d{2}[-]\\d{2}[T]\\d{2}[:]\\d{2}[:]\\d{2}$/\n  };\n\n  constructor(check: Valcheck<E>) {\n    super(check);\n  }\n\n  public get attributes(): TemplateCheckerAttributes {\n    return {\n      type: TemplateFieldType.DATE_TIME,\n      shorthand: 'format',\n      defaultSerializer: InputSerialization.NATIVE_DATE_TIME\n    };\n  }\n\n  /**\n   * Transform the parsed json-options necessary.\n   */\n  protected normalizeOptions(options: DatetimeTemplate['options']): DatetimeTemplate['options'] {\n    const changes: GenericObject<string> = {};\n\n    const dateTimeOptionsKeys: Array<keyof DatetimeTemplate['options']> = ['min', 'max', 'default'];\n    for (const key of dateTimeOptionsKeys) {\n      if (options[key] !== undefined) {\n        // In output `min`, `max`, `default` value are always expressed in `YYYY-MM-DDThh:mm:ssZ`.\n        // If timezone was defined, they are corrected with the appropriate timezone.\n        changes[key] = this.localeToUTC0(options[key] as string, options.timezone as string);\n      }\n    }\n\n    return tools.defaults(changes, options);\n  }\n\n  /**\n   * Convert a locale date string to a UTC-0 date string.\n   *\n   * e.g: date: 1969-01-01T11:18:23 timezone: +05:30 ---> 1969-01-01T05:48:23.000Z\n   */\n  private localeToUTC0(date: string, timezone = 'Z'): string {\n    // this method assumes that date is not in UTC-0 (does not end with Z)\n    return new Date(date + timezone).toISOString();\n  }\n\n  /**\n   * Convert a UTC-0 date string to a locale date string with a defined timezone.\n   *\n   * e.g: date: 1998-06-01T09:18:23.000Z timezone: +05:30 ---> 1998-06-01T14:48:23.000+05:30\n   */\n  private UTC0ToLocale(date: string, timezone: string): string {\n    // this method assumes that date is in UTC-0 (ends with timezone = Z)\n    if (timezone === 'Z') {\n      // timezone is UTC-0, nothing to do.\n      return date;\n    }\n\n    // if date is UTC-0 then the date was corrected with the given timezone\n    // so we add or remove the time difference.\n    const oppositeSign = timezone.startsWith('+') ? '-' : '+';\n    const originalDate = date.slice(0, -1) + timezone.replace(timezone.charAt(0), oppositeSign);\n    date = new Date(originalDate).toISOString().slice(0, -1);\n    return date + timezone;\n  }\n\n  /**\n   * Normalize input to be inserted in a graph query.\n   */\n  protected normalizeInput(\n    input: string,\n    options: DatetimeTemplate['options']\n  ): {value: TemplateDataValue; serializer: InputSerialization} {\n    const timezone = options.timezone as string;\n    if (options.format === DatetimeTemplateFormat.NATIVE) {\n      if (options.timezone) {\n        // If timezone is defined, we re-correct the date by adding the timezone to the UTC-0 date\n        // before passing it to the quote function.\n        // e.g: quote('YY-MM-DDThh:mm:ss+XX:YY', InputSerialization.NATIVE_DATE_TIME)\n        input = this.UTC0ToLocale(input, timezone);\n      } else {\n        // If timezone is not defined, the date does not have a timezone, suffix 'Z' should be removed\n        // e.g: quote('YY-MM-DDThh:mm:ss', InputSerialization.NATIVE_DATE_TIME)\n        const lastChar = input.charAt(input.length - 1);\n        if (lastChar === 'Z') {\n          input = input.slice(0, -1);\n        }\n      }\n      return {value: input, serializer: InputSerialization.NATIVE_DATE_TIME};\n    } else {\n      const formattedDate = DateChecker.formatDate(\n        new Date(input),\n        options.format,\n        this.defaultFormat.iso\n      );\n      return {value: formattedDate, serializer: InputSerialization.STRING};\n    }\n  }\n\n  /**\n   * TemplateField json-options valcheck field definition.\n   */\n  protected getOptionsFieldDefinition(): FieldDefinition<E> {\n    // TODO Copied from DateChecker, avoid duplicate code\n    const checkDate = (key: string, value: unknown) => {\n      this.check.string(key, value, true);\n      if (!this.defaultFormat.rx.test(value as string)) {\n        throw ParserError.options(Message.PATTERN_MATCH_FAILED, {\n          key: key,\n          pattern: this.defaultFormat.iso\n        });\n      }\n\n      const dateCandidate = Date.parse(value as string);\n      if (dateCandidate !== dateCandidate) {\n        // IE compatible NaN check\n        throw ParserError.options(Message.INVALID_DATE, {key: key});\n      }\n    };\n\n    const acceptedFormats: DatetimeTemplateFormat[] = Object.values(DatetimeTemplateFormat);\n    const properties = {\n      format: {required: true, values: acceptedFormats},\n      min: {required: false, check: checkDate},\n      max: {required: false, check: checkDate},\n      default: {required: false, check: checkDate},\n      timezone: {\n        required: false,\n        check: (key: string, value: unknown) => {\n          const timezonePattern = '[+-]HH:MM | Z';\n          const timezoneRx = /(^[+-]\\d{2}:\\d{2}$)|(^[Z]$)/;\n          this.check.string(key, value, true);\n          if (!timezoneRx.test(value as string)) {\n            throw ParserError.options(Message.PATTERN_MATCH_FAILED, {\n              key: key,\n              pattern: timezonePattern\n            });\n          }\n          // we use a dummy date to validate the timezone using the date parser.\n          const dateCandidate = Date.parse('1969-12-31T23:00:00.000' + value);\n          if (dateCandidate !== dateCandidate) {\n            // IE compatible NaN check\n            throw ParserError.options(Message.INVALID_TIMEZONE, {key: key});\n          }\n        }\n      }\n    };\n    return {\n      required: true,\n      properties: properties,\n      check: (key: string, value: unknown) => {\n        this.check.property(key, value, {properties: properties});\n        const options = value as {format: string; min?: string; max?: string; default: string};\n\n        this.check.properties(\n          key,\n          options,\n          {\n            min: DateChecker.between(undefined, options.max),\n            max: DateChecker.between(options.min, undefined),\n            default: DateChecker.between(options.min, options.max)\n          },\n          'inclusive'\n        );\n      }\n    };\n  }\n\n  /**\n   * Template input value field definition. Copied from DateChecker.\n   *\n   * @param options\n   */\n  protected getInputFieldDefinition(\n    options: DatetimeTemplate['options'] = {} as DatetimeTemplate['options']\n  ): FieldDefinition<E> {\n    return {\n      check: (key: string, value: unknown) => {\n        this.check.type(key, value, 'string');\n        const date = new Date(value as string);\n        this.check.date(key, date, false);\n        this.check.date(key, value, true);\n        this.check.property(\n          key,\n          value,\n          DateChecker.between(options.min as string, options.max as string)\n        );\n      }\n    };\n  }\n}\n"]}