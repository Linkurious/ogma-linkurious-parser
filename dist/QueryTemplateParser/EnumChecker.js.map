{"version":3,"file":"EnumChecker.js","sourceRoot":"","sources":["../../src/QueryTemplateParser/EnumChecker.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * LINKURIOUS CONFIDENTIAL\n * Copyright Linkurious SAS 2012 - 2019\n *\n * - Created on 2019-02-01.\n */\nimport {FieldDefinition, Valcheck} from 'valcheck/lib/valcheck/Valcheck';\nimport {EnumTemplate, EnumValue, GenericObject, TemplateFieldType} from '@linkurious/rest-client';\n\nimport * as tools from '../tools/tools';\n\nimport {RawFieldChecker} from './RawFieldChecker';\nimport {Message, ParserError} from './ParserError';\n\nimport {InputSerialization, TemplateCheckerAttributes, TemplateDataValue} from './index';\n\nexport class EnumChecker<E> extends RawFieldChecker<E> {\n  constructor(check: Valcheck<E>) {\n    super(check);\n  }\n\n  public get attributes(): TemplateCheckerAttributes {\n    return {\n      type: TemplateFieldType.ENUM,\n      shorthand: 'values',\n      defaultSerializer: InputSerialization.STRING\n    };\n  }\n\n  /**\n   * TemplateField json-options valcheck field definition.\n   */\n  protected getOptionsFieldDefinition(): FieldDefinition<E> {\n    const enumValueProperties: GenericObject<FieldDefinition<E>> = {\n      value: {required: true, type: ['string', 'number', 'boolean']},\n      label: {required: true, check: 'string'}\n    };\n    const properties: GenericObject<FieldDefinition<E>> = {\n      default: {check: 'string'},\n      values: {\n        required: true,\n        arrayItem: {\n          required: true,\n          check: (key: string, value: unknown) => {\n            this.check.type(key, value, ['string', 'number', 'boolean', 'object']);\n            if (tools.isObject(value)) {\n              this.check.properties(key, value, enumValueProperties);\n            }\n          }\n        }\n      }\n    };\n    return {\n      required: true,\n      properties: properties,\n      check: (key: string, value: unknown) => {\n        this.check.property(key, value, {properties: properties});\n\n        const options = value as {default: string; values: Array<{value: unknown; label: string}>};\n\n        const values = tools.map(options.values, (v) => (tools.isObject(v) ? v.value : v));\n\n        if (tools.uniq(values).length !== values.length) {\n          throw ParserError.options(Message.NOT_UNIQUE_ENUM);\n        }\n\n        this.check.property(key, value, {\n          properties: {\n            values: {check: ['array', 2]},\n            default: {values: values}\n          },\n          policy: 'inclusive'\n        });\n      }\n    };\n  }\n\n  protected normalizeOptions(options: {\n    values: string[] | Array<{label: string; value: EnumValue}>;\n  }): EnumTemplate['options'] {\n    const changes = {} as EnumTemplate['options'];\n    changes.values = tools.map(options.values, (value) => {\n      if (!tools.isObject(value)) {\n        return {label: value + '', value: value};\n      }\n      return value as {label: string; value: EnumValue};\n    });\n    return tools.defaults(changes, options);\n  }\n\n  /**\n   * Template input value field definition.\n   *\n   * @param options\n   */\n  protected getInputFieldDefinition(\n    options: EnumTemplate['options'] = {} as EnumTemplate['options']\n  ): FieldDefinition<E> {\n    const values = tools.map(options.values as Array<unknown>, 'value');\n    return {check: ['values', values]};\n  }\n\n  /**\n   * Normalize input to be inserted in a graph query.\n   *\n   * @param input\n   * @param options\n   */\n  protected normalizeInput(\n    input: TemplateDataValue,\n    options?: EnumTemplate['options']\n  ): {value: TemplateDataValue; serializer: InputSerialization} {\n    const serializers: GenericObject<InputSerialization> = {\n      number: InputSerialization.NUMBER,\n      boolean: InputSerialization.BOOLEAN\n    };\n    return {\n      value: input,\n      serializer: serializers[this.check.getType(input)] || this.attributes.defaultSerializer\n    };\n  }\n}\n"]}