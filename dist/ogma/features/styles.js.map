{"version":3,"file":"styles.js","sourceRoot":"","sources":["../../../src/ogma/features/styles.ts"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nimport * as o from 'ogma';\nimport {\n  GenericObject,\n  LkEdgeData,\n  LkNodeData,\n  OgmaEdgeShape,\n  OgmaNodeShape,\n  TextOptions\n} from '@linkurious/rest-client';\n\nimport {NodeList} from '../models';\nimport {BASE_GREY, EdgeAttributes, LKOgma, NodeAttributes, StyleRule, Tools} from '../..';\n\nexport interface StylesConfig {\n  nodeColorStyleRules: Array<StyleRule>;\n  nodeIconStyleRules: Array<StyleRule>;\n  nodeSizeStyleRules: Array<StyleRule>;\n  nodeShapeStyleRules?: Array<StyleRule>;\n  edgeColorStyleRules: Array<StyleRule>;\n  edgeWidthStyleRules: Array<StyleRule>;\n  edgeShapeStyleRules?: Array<StyleRule>;\n}\n\nconst HOVERED_SELECTED_NODE_STYLE: o.NodeAttributesValue = {\n  text: {\n    style: 'bold',\n    backgroundColor: '#fff',\n    minVisibleSize: 0\n  },\n  outerStroke: {width: 2},\n  outline: false\n};\n\nconst HOVERED_SELECTED_EDGE_STYLE: o.EdgeAttributesValue = {\n  text: {\n    style: 'bold',\n    backgroundColor: '#fff',\n    minVisibleSize: 0\n  },\n  outline: false\n};\n\nconst NODE_HALO_CONFIGURATION = {\n  color: '#FFF',\n  size: 7,\n  scalingMethod: 'scaled',\n  strokeWidth: 0,\n  hideNonAdjacentEdges: true\n} as {\n  color: '#FFF';\n  size: 7;\n  strokeWidth: 0;\n};\n\nconst EDGE_HALO_CONFIGURATION = {\n  color: '#FFF',\n  scalingMethod: 'scaled',\n  size: 4\n} as {\n  color: '#FFF';\n  size: 4;\n};\n\nexport const FILTER_OPACITY = 0.2;\n\nexport class StylesViz {\n  private _ogma: LKOgma;\n  private _exportClass!: o.StyleClass;\n  private _nodeDefaultStylesRules!: o.StyleRule;\n  private _nodeDefaultHaloRules!: o.StyleRule;\n  private _edgeDefaultStylesRules!: o.StyleRule;\n  private _edgeDefaultHaloRules!: o.StyleRule;\n\n  private _nodeColorAttribute!: NodeAttributes;\n  private _ogmaNodeColor!: o.StyleRule;\n  private _nodeIconAttribute!: NodeAttributes;\n  private _ogmaNodeIcon!: o.StyleRule;\n  private _nodeSizeAttribute!: NodeAttributes;\n  private _ogmaNodeSize!: o.StyleRule;\n  private _nodeShapeAttribute!: NodeAttributes;\n  private _ogmaNodeShape!: o.StyleRule;\n  private _edgeColorAttribute!: EdgeAttributes;\n  private _ogmaEdgeColor!: o.StyleRule;\n  private _edgeWidthAttribute!: EdgeAttributes;\n  private _ogmaEdgeWidth!: o.StyleRule;\n  private _edgeShapeAttribute!: EdgeAttributes;\n  private _ogmaEdgeShape!: o.StyleRule;\n\n  constructor(ogma: LKOgma) {\n    this._ogma = ogma;\n  }\n\n  /**\n   * Set nodes default styles based on the configuration\n   */\n  public setNodesDefaultStyles(\n    nodeStyleConf:\n      | {\n          nodeRadius?: number;\n          shape?: OgmaNodeShape;\n          text?: TextOptions & {\n            nodePosition?: 'right' | 'left' | 'top' | 'bottom' | 'center';\n          };\n        }\n      | undefined\n  ): void {\n    // setting selection and hover attributes\n    this._ogma.styles.setHoveredNodeAttributes(HOVERED_SELECTED_NODE_STYLE);\n    this._ogma.styles.setSelectedNodeAttributes(HOVERED_SELECTED_NODE_STYLE);\n    // setting default styles\n    this._nodeDefaultStylesRules = this._ogma.styles.addRule({\n      nodeAttributes: {\n        text: {\n          minVisibleSize:\n            nodeStyleConf !== undefined &&\n            nodeStyleConf.text !== undefined &&\n            nodeStyleConf.text.minVisibleSize\n              ? nodeStyleConf.text.minVisibleSize\n              : 12,\n          maxLineLength:\n            nodeStyleConf !== undefined &&\n            nodeStyleConf.text !== undefined &&\n            nodeStyleConf.text.maxLineLength !== undefined\n              ? nodeStyleConf.text.maxLineLength\n              : 30,\n          position:\n            nodeStyleConf !== undefined &&\n            nodeStyleConf.text !== undefined &&\n            nodeStyleConf.text.nodePosition !== undefined\n              ? nodeStyleConf.text.nodePosition\n              : 'bottom',\n          backgroundColor:\n            nodeStyleConf !== undefined &&\n            nodeStyleConf.text !== undefined &&\n            nodeStyleConf.text.backgroundColor !== undefined\n              ? nodeStyleConf.text.backgroundColor\n              : 'null',\n          font:\n            nodeStyleConf !== undefined &&\n            nodeStyleConf.text !== undefined &&\n            nodeStyleConf.text.font !== undefined\n              ? nodeStyleConf.text.font\n              : 'roboto',\n          color:\n            nodeStyleConf !== undefined &&\n            nodeStyleConf.text !== undefined &&\n            nodeStyleConf.text.color !== undefined\n              ? nodeStyleConf.text.color\n              : 'black',\n          size:\n            nodeStyleConf !== undefined &&\n            nodeStyleConf.text !== undefined &&\n            nodeStyleConf.text.size !== undefined\n              ? nodeStyleConf.text.size\n              : 14,\n          margin: 5\n        },\n        radius: this.defaultNodeRadius(nodeStyleConf),\n        icon: {\n          minVisibleSize: 15\n        },\n        color: '#7f7f7f',\n        shape:\n          nodeStyleConf !== undefined && nodeStyleConf.shape !== undefined\n            ? nodeStyleConf.shape\n            : ('circle' as OgmaNodeShape),\n        innerStroke: {\n          width: 3\n        },\n        outline: false\n      }\n    });\n  }\n\n  /**\n   * Set edges default styles based on the configuration\n   */\n  public setEdgesDefaultStyles(\n    edgeStyleConf:\n      | {\n          edgeWidth?: number;\n          shape?: OgmaEdgeShape;\n          text?: TextOptions;\n        }\n      | undefined\n  ): void {\n    // setting selection and hover attributes\n    this._ogma.styles.setHoveredEdgeAttributes(HOVERED_SELECTED_EDGE_STYLE);\n    this._ogma.styles.setSelectedEdgeAttributes(HOVERED_SELECTED_EDGE_STYLE);\n    // setting default styles\n    this._edgeDefaultStylesRules = this._ogma.styles.addRule({\n      edgeAttributes: {\n        text: {\n          minVisibleSize:\n            edgeStyleConf !== undefined &&\n            edgeStyleConf.text !== undefined &&\n            edgeStyleConf.text.minVisibleSize\n              ? edgeStyleConf.text.minVisibleSize\n              : 3,\n          maxLineLength:\n            edgeStyleConf !== undefined &&\n            edgeStyleConf.text !== undefined &&\n            edgeStyleConf.text.maxLineLength !== undefined\n              ? edgeStyleConf.text.maxLineLength\n              : 30,\n          backgroundColor:\n            edgeStyleConf !== undefined &&\n            edgeStyleConf.text !== undefined &&\n            edgeStyleConf.text.backgroundColor !== undefined\n              ? edgeStyleConf.text.backgroundColor\n              : null,\n          font:\n            edgeStyleConf !== undefined &&\n            edgeStyleConf.text !== undefined &&\n            edgeStyleConf.text.font !== undefined\n              ? edgeStyleConf.text.font\n              : 'roboto',\n          color:\n            edgeStyleConf !== undefined &&\n            edgeStyleConf.text !== undefined &&\n            edgeStyleConf.text.color !== undefined\n              ? edgeStyleConf.text.color\n              : 'black',\n          size:\n            edgeStyleConf !== undefined &&\n            edgeStyleConf.text !== undefined &&\n            edgeStyleConf.text.size !== undefined\n              ? edgeStyleConf.text.size\n              : 14\n        },\n        width: this.defaultEdgeWidth(edgeStyleConf),\n        shape:\n          edgeStyleConf !== undefined && edgeStyleConf.shape !== undefined\n            ? edgeStyleConf.shape\n            : 'arrow',\n        color: '#7f7f7f'\n      }\n    });\n  }\n\n  /**\n   * Set nodes default styles based on the configuration\n   */\n  public setNodesDefaultHalo(): void {\n    // setting default halo style\n    this._nodeDefaultHaloRules = this._ogma.styles.addRule({\n      nodeAttributes: {\n        halo: (node: o.Node | undefined) => {\n          if (\n            node !== undefined &&\n            !node.hasClass('filtered') &&\n            (node.isSelected() ||\n              node\n                .getAdjacentNodes({})\n                .filter((n) => !n.hasClass('filtered'))\n                .isSelected()\n                .includes(true) ||\n              node\n                .getAdjacentEdges()\n                .filter((e) => !e.hasClass('filtered'))\n                .isSelected()\n                .includes(true))\n          ) {\n            return {\n              ...NODE_HALO_CONFIGURATION,\n              scalingMethod: this._ogma.geo.enabled() ? 'fixed' : 'scaled'\n            } as {\n              color: '#FFF';\n              size: 7;\n              strokeWidth: 0;\n            };\n          }\n          return null;\n        }\n      }\n    });\n  }\n\n  /**\n   * Set edges default styles based on the configuration\n   */\n  public setEdgesDefaultHalo(): void {\n    // setting default halo styles\n    this._edgeDefaultHaloRules = this._ogma.styles.addRule({\n      edgeAttributes: {\n        halo: (edge: o.Edge | undefined) => {\n          if (\n            edge !== undefined &&\n            !edge.hasClass('filtered') &&\n            (edge.isSelected() ||\n              edge\n                .getExtremities()\n                .filter((n) => !n.hasClass('filtered'))\n                .isSelected()\n                .includes(true))\n          ) {\n            return {\n              ...EDGE_HALO_CONFIGURATION,\n              scalingMethod: this._ogma.geo.enabled() ? 'fixed' : 'scaled'\n            } as {\n              color: '#FFF';\n              size: 4;\n            };\n          }\n          return null;\n        }\n      }\n    });\n  }\n\n  /**\n   * Return the default node radius set in configuration or 5\n   *\n   * @returns {number}\n   */\n  private defaultNodeRadius(styles: any): number {\n    return this.defaultStylesHas(styles, ['nodeRadius']) ? styles.nodeRadius : 5;\n  }\n\n  /**\n   * Return the default edge width set in configuration or 1\n   *\n   * @returns {number}\n   */\n  private defaultEdgeWidth(styles: any): number {\n    return this.defaultStylesHas(styles, ['edgeWidth']) ? styles.edgeWidth : 1;\n  }\n\n  /**\n   * Check if a style property exists in the default styles object\n   */\n  private defaultStylesHas(styles: GenericObject<unknown>, propertyPath: Array<string>): boolean {\n    if (!Tools.isDefined(styles)) {\n      return false;\n    }\n    return Tools.getIn(styles, propertyPath) !== undefined;\n  }\n\n  /**\n   * Set styles for the class \"filtered\"\n   */\n  public setFilterClass(): void {\n    this._ogma.styles.createClass({\n      name: 'filtered',\n      nodeAttributes: {\n        opacity: FILTER_OPACITY,\n        layer: -1,\n        detectable: false,\n        badges: {\n          topRight: {\n            text: null\n          },\n          bottomRight: {\n            text: null\n          }\n        },\n        text: null,\n        color: 'rgb(240, 240, 240)',\n        innerStroke: {\n          width: 1,\n          color: BASE_GREY,\n          minVisibleSize: 1\n        },\n        shape: 'circle',\n        image: null,\n        icon: null,\n        radius: '100%'\n      },\n      edgeAttributes: {\n        opacity: FILTER_OPACITY,\n        layer: -1,\n        detectable: false,\n        text: null,\n        color: BASE_GREY,\n        shape: 'line',\n        width: 0.2\n      }\n    });\n  }\n\n  /**\n   * Set the class for exported nodes and edges\n   */\n  public setExportClass(textWrappingLength?: boolean): void {\n    if (!this._exportClass) {\n      this._exportClass = this._ogma.styles.createClass({\n        name: 'exported',\n        nodeAttributes: {\n          text: {\n            minVisibleSize: 0,\n            font: 'arial',\n            backgroundColor: null,\n            maxLineLength: textWrappingLength ? 30 : 0,\n            scale: 0.3,\n            backgroundArrowBaseSize: 0,\n            margin: 0,\n            scaling: true,\n            tip: false\n          },\n          halo: null\n        },\n        edgeAttributes: {\n          text: {\n            scale: 3.0,\n            scaling: true,\n            font: 'arial',\n            backgroundColor: null,\n            minVisibleSize: 0,\n            size: 3,\n            margin: 0\n          },\n          halo: null,\n          shape: 'tapered'\n        }\n      });\n    } else {\n      this._exportClass.update({\n        nodeAttributes: {\n          text: {\n            maxLineLength: textWrappingLength ? 30 : 0\n          },\n          halo: null\n        }\n      });\n    }\n  }\n\n  /**\n   * Set the rule to display badges\n   */\n  public setBadgeRule() {\n    this._ogma.styles.createClass({\n      name: 'degreeIndicator',\n      nodeAttributes: {\n        badges: {\n          topRight: (node) => {\n            if (node !== undefined) {\n              const degree = Tools.getHiddenNeighbors(\n                node.toList() as NodeList<LkNodeData, LkEdgeData>\n              );\n              const badgeContent = Tools.shortenNumber(degree);\n              if (degree > 0) {\n                const nodeColor = Array.isArray(node.getAttribute('color'))\n                  ? node.getAttribute('color')[0]\n                  : node.getAttribute('color');\n                const textColor = Tools.isBright(nodeColor) ? '#000' : '#FFF';\n                const isSupernode = node.getData(['statistics', 'supernode']);\n                let content = null;\n                if (+badgeContent !== 0) {\n                  content = isSupernode ? badgeContent + '+' : badgeContent;\n                }\n                return {\n                  color: 'inherit',\n                  minVisibleSize: 20,\n                  stroke: {\n                    width: 0,\n                    color: null\n                  },\n                  text: {\n                    font: 'roboto',\n                    scale: 0.4,\n                    color: textColor,\n                    content: content\n                  }\n                };\n              }\n            }\n          }\n        }\n      }\n    });\n    this._ogma.styles.createClass({\n      name: 'pinnedIndicator',\n      nodeAttributes: {\n        badges: {\n          bottomRight: (node) => {\n            if (node !== undefined && !node.getAttribute('layoutable')) {\n              const nodeColor = Array.isArray(node.getAttribute('color'))\n                ? node.getAttribute('color')[0]\n                : node.getAttribute('color');\n              const textColor = Tools.isBright(nodeColor) ? '#000' : '#FFF';\n              return {\n                color: 'inherit',\n                minVisibleSize: 20,\n                stroke: {\n                  width: 0,\n                  color: null\n                },\n                text: {\n                  font: 'FontAwesome',\n                  scale: 0.4,\n                  color: textColor,\n                  content: node.getAttribute('layoutable') ? null : '\\uf08d'\n                }\n              };\n            }\n          }\n        }\n      },\n      nodeDependencies: {\n        self: {attributes: ['layoutable']}\n      }\n    });\n    this._ogma.events.onNodesAdded(({nodes}) => nodes.addClass('degreeIndicator'));\n    this._ogma.events.onNodesAdded(({nodes}) => nodes.addClass('pinnedIndicator'));\n  }\n\n  /**\n   * Delete the rule to display badges\n   */\n  public deleteBadgeRule() {\n    this._ogma.getNodes().removeClasses(['degreeIndicator', 'pinnedIndicator'], 0);\n  }\n\n  /**\n   * set text overlap to true or false\n   *\n   * @param {boolean} overlap\n   */\n  public toggleTextOverlap(overlap?: boolean): void {\n    this._ogma.setOptions({texts: {preventOverlap: overlap}});\n  }\n\n  /**\n   * refresh nodes and edge rules\n   *\n   */\n  public refreshRules(): void {\n    this._nodeDefaultStylesRules.refresh();\n    this._nodeDefaultHaloRules.refresh();\n    this._edgeDefaultStylesRules.refresh();\n    this._edgeDefaultHaloRules.refresh();\n  }\n\n  /**\n   * Create / refresh an ogma rule for node colors\n   */\n  public refreshNodeColors(colorStyleRules: Array<StyleRule>): void {\n    if (!Tools.isDefined(this._ogmaNodeColor)) {\n      this._nodeColorAttribute = new NodeAttributes({color: colorStyleRules});\n      this._ogmaNodeColor = this._ogma.styles.addRule({\n        nodeAttributes: {\n          color: (node: o.Node | undefined) => {\n            if (node !== undefined) {\n              return this._nodeColorAttribute.color(node.getData());\n            }\n          }\n        },\n        nodeDependencies: {self: {data: true}}\n      });\n    } else {\n      this._nodeColorAttribute.refresh({color: colorStyleRules});\n      this._ogmaNodeColor.refresh();\n    }\n  }\n\n  /**\n   * Create / refresh an ogma rule for node icons\n   *\n   * @param {Array<any>} iconStyleRules\n   */\n  public refreshNodeIcons(iconStyleRules: Array<StyleRule>): void {\n    if (!Tools.isDefined(this._ogmaNodeIcon)) {\n      this._nodeIconAttribute = new NodeAttributes({icon: iconStyleRules});\n      this._ogmaNodeIcon = this._ogma.styles.addRule({\n        nodeAttributes: {\n          icon: (node: o.Node | undefined) => {\n            if (node !== undefined) {\n              return this._nodeIconAttribute.icon(node.getData()).icon;\n            }\n          },\n          image: (node: o.Node | undefined) => {\n            if (node !== undefined) {\n              return this._nodeIconAttribute.icon(node.getData()).image;\n            }\n          }\n        },\n        nodeDependencies: {self: {data: true}}\n      });\n    } else {\n      this._nodeIconAttribute.refresh({icon: iconStyleRules});\n      this._ogmaNodeIcon.refresh();\n    }\n  }\n\n  /**\n   * Create / refresh an ogma rule for node sizes\n   *\n   * @param {Array<any>} sizeStyleRules\n   */\n  public refreshNodeSize(sizeStyleRules: Array<StyleRule>): void {\n    if (!Tools.isDefined(this._ogmaNodeSize)) {\n      this._nodeSizeAttribute = new NodeAttributes({size: sizeStyleRules});\n      this._ogmaNodeSize = this._ogma.styles.addRule({\n        nodeAttributes: {\n          radius: (node: o.Node | undefined) => {\n            if (node !== undefined) {\n              return this._nodeSizeAttribute.size(node.getData());\n            }\n          }\n        },\n        nodeDependencies: {self: {data: true}}\n      });\n    } else {\n      this._nodeSizeAttribute.refresh({size: sizeStyleRules});\n      this._ogmaNodeSize.refresh();\n    }\n  }\n\n  /**\n   * Create / refresh an ogma rule for node images\n   *\n   * @param {Array<any>} shapeStyleRules\n   */\n  public refreshNodeShape(shapeStyleRules: Array<StyleRule>): void {\n    if (!Tools.isDefined(this._ogmaNodeShape)) {\n      this._nodeShapeAttribute = new NodeAttributes({shape: shapeStyleRules});\n      this._ogmaNodeShape = this._ogma.styles.addRule({\n        nodeAttributes: {\n          shape: (node: o.Node | undefined) => {\n            if (node !== undefined) {\n              return this._nodeShapeAttribute.shape(node.getData());\n            }\n          }\n        },\n        nodeDependencies: {self: {data: true}}\n      });\n    } else {\n      this._nodeShapeAttribute.refresh({shape: shapeStyleRules});\n      this._ogmaNodeShape.refresh();\n    }\n  }\n\n  /**\n   * Create / refresh an ogma rule for edge colors\n   */\n  public refreshEdgeColors(colorStyleRules: Array<StyleRule>): void {\n    if (!Tools.isDefined(this._ogmaEdgeColor)) {\n      this._edgeColorAttribute = new EdgeAttributes({color: colorStyleRules});\n      this._ogmaEdgeColor = this._ogma.styles.addRule({\n        edgeAttributes: {\n          color: (edge: o.Edge | undefined) => {\n            if (edge !== undefined) {\n              return this._edgeColorAttribute.color(edge.getData());\n            }\n          }\n        },\n        edgeDependencies: {self: {data: true}}\n      });\n    } else {\n      this._edgeColorAttribute.refresh({color: colorStyleRules});\n      this._ogmaEdgeColor.refresh();\n    }\n  }\n\n  /**\n   * Create / refresh an ogma rule for edge width\n   *\n   * @param {Array<StyleRule>} widthStyleRules\n   */\n  public refreshEdgeWidth(widthStyleRules: Array<StyleRule>): void {\n    if (!Tools.isDefined(this._ogmaEdgeWidth)) {\n      this._edgeWidthAttribute = new EdgeAttributes({width: widthStyleRules});\n      this._ogmaEdgeWidth = this._ogma.styles.addRule({\n        edgeAttributes: {\n          width: (edge: o.Edge | undefined) => {\n            if (edge !== undefined) {\n              return this._edgeWidthAttribute.width(edge.getData());\n            }\n          }\n        },\n        edgeDependencies: {\n          self: {data: true}\n        }\n      });\n    } else {\n      this._edgeWidthAttribute.refresh({width: widthStyleRules});\n      this._ogmaEdgeWidth.refresh();\n    }\n  }\n\n  /**\n   * Create / refresh an ogma rule for edge width\n   *\n   * @param {Array<StyleRule>} shapeStyleRules\n   */\n  public refreshEdgeShape(shapeStyleRules: Array<StyleRule>): void {\n    if (!Tools.isDefined(this._ogmaEdgeShape)) {\n      this._edgeShapeAttribute = new EdgeAttributes({shape: shapeStyleRules});\n      this._ogmaEdgeShape = this._ogma.styles.addRule({\n        edgeAttributes: {\n          shape: (edge: o.Edge | undefined) => {\n            if (edge !== undefined) {\n              return this._edgeShapeAttribute.shape(edge.getData());\n            }\n          }\n        },\n        edgeDependencies: {self: {data: true}}\n      });\n    } else {\n      this._edgeShapeAttribute.refresh({shape: shapeStyleRules});\n      this._ogmaEdgeShape.refresh();\n    }\n  }\n}\n"]}