{"version":3,"file":"selectors.js","sourceRoot":"","sources":["../../../src/ogma/features/selectors.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAKb,2BAA4B;AAM5B;;GAEG;AACU,QAAA,gBAAgB,GAAG,UAAC,KAAgB;IAC/C,OAAQ,KAAK,CAAC,SAA8C,CAAC,IAAI,CAAC;AACpE,CAAC,CAAC;AAEF;;GAEG;AACU,QAAA,iBAAiB,GAAG,UAAC,KAAgB;IAChD,QAAS,KAAK,CAAC,SAA8C,CAAC,IAAI,EAAE;QAClE,KAAK,CAAC;YACJ,OAAO,WAAW,CAAC;QAErB,KAAK,CAAC;YACJ,OAAO,aAAa,CAAC;QAEvB;YACE,OAAO,gBAAgB,CAAC;KAC3B;AACH,CAAC,CAAC;AAEF;;GAEG;AACU,QAAA,kBAAkB,GAAG,UAAC,KAAgB;IACjD,IAAI,KAAK,CAAC,SAAS,CAAC,IAAI,KAAK,CAAC,EAAE;QAC9B,OAAO,SAAS,CAAC;KAClB;IACD,OAAQ,KAAK,CAAC,SAA8C,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC;AACxF,CAAC,CAAC;AAEF;;GAEG;AACU,QAAA,gBAAgB,GAAG,UAC9B,KAAgB;IAEhB,OAAO,KAAK,CAAC,SAAS,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;AACzE,CAAC,CAAC;AAEF;;GAEG;AACU,QAAA,qBAAqB,GAAG,UAAC,KAAgB;IACpD,IAAM,aAAa,GAAG,wBAAgB,CAAC,KAAK,CAAC,CAAC;IAC9C,IAAI,aAAa,KAAK,SAAS,EAAE;QAC/B,OAAO,SAAS,CAAC;KAClB;IACD,IAAI,SAAK,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE;QAC/B,OAAO,aAAa,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;KAC5C;SAAM;QACL,OAAO,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;KACxC;AACH,CAAC,CAAC;AAEF;;GAEG;AACU,QAAA,sBAAsB,GAAG,UAAC,KAAgB;IACrD,IAAM,aAAa,GAAG,wBAAgB,CAAC,KAAK,CAAC,CAAC;IAC9C,IAAI,aAAa,KAAK,SAAS,EAAE;QAC/B,OAAO,SAAS,CAAC;KAClB;IACD,IAAI,aAAa,CAAC,MAAM,EAAE;QACxB,OAAO,MAAM,CAAC;KACf;IACD,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AAEF;;GAEG;AACU,QAAA,sBAAsB,GAAG,UAAC,KAAgB;IACrD,IAAM,aAAa,GAAG,wBAAgB,CAAC,KAAK,CAAC,CAAC;IAC9C,IAAI,aAAa,KAAK,SAAS,EAAE;QAC/B,IAAM,YAAU,GAAG,aAAa,CAAC,OAAO,EAAE,CAAC,UAAU,CAAC;QACtD,OAAO,MAAM,CAAC,IAAI,CAAC,YAAU,CAAC,CAAC,GAAG,CAAC,UAAC,OAAO;YACzC,OAAO;gBACL,GAAG,EAAE,OAAO;gBACZ,KAAK,EAAE,YAAU,CAAC,OAAO,CAAC;aAC3B,CAAC;QACJ,CAAC,CAAC,CAAC;KACJ;IACD,OAAO,EAAE,CAAC;AACZ,CAAC,CAAC;AAEF;;GAEG;AACU,QAAA,sBAAsB,GAAG,UAAC,KAAgB;IACrD,OAAO,8BAAsB,CAAC,KAAK,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;AAClD,CAAC,CAAC","sourcesContent":["'use strict';\n\nimport {LkEdgeData, LkNodeData} from '@linkurious/rest-client';\n\nimport {Edge, Node, ItemList} from '../models';\nimport {Tools} from '../..';\n\nimport {OgmaState} from './reactive';\n\nexport type SelectionState = 'selection' | 'multiSelection' | 'noSelection';\n\n/**\n * Return the current size of the selection\n */\nexport const getSelectionSize = (state: OgmaState): number => {\n  return (state.selection as ItemList<LkNodeData, LkEdgeData>).size;\n};\n\n/**\n * Return the current state of the selection\n */\nexport const getSelectionState = (state: OgmaState): SelectionState => {\n  switch ((state.selection as ItemList<LkNodeData, LkEdgeData>).size) {\n    case 1:\n      return 'selection';\n\n    case 0:\n      return 'noSelection';\n\n    default:\n      return 'multiSelection';\n  }\n};\n\n/**\n * Get the entityType of the current selection\n */\nexport const getSelectionEntity = (state: OgmaState): 'node' | 'edge' | undefined => {\n  if (state.selection.size === 0) {\n    return undefined;\n  }\n  return (state.selection as ItemList<LkNodeData, LkEdgeData>).isNode ? 'node' : 'edge';\n};\n\n/**\n * Return the item selection if there's only one item selected\n */\nexport const getUniqSelection = (\n  state: OgmaState\n): Node<LkNodeData, LkEdgeData> | Edge<LkEdgeData, LkNodeData> | undefined => {\n  return state.selection.size === 1 ? state.selection.get(0) : undefined;\n};\n\n/**\n * Return the types of the current selection (if only one item is selected)\n */\nexport const getUniqSelectionTypes = (state: OgmaState): Array<string> | undefined => {\n  const uniqSelection = getUniqSelection(state);\n  if (uniqSelection === undefined) {\n    return undefined;\n  }\n  if (Tools.isNode(uniqSelection)) {\n    return uniqSelection.getData('categories');\n  } else {\n    return [uniqSelection.getData('type')];\n  }\n};\n\n/**\n * Return the entityType of the current selection if there's only one item selected\n */\nexport const getUniqSelectionEntity = (state: OgmaState): 'node' | 'edge' | undefined => {\n  const uniqSelection = getUniqSelection(state);\n  if (uniqSelection === undefined) {\n    return undefined;\n  }\n  if (uniqSelection.isNode) {\n    return 'node';\n  }\n  return 'edge';\n};\n\n/**\n * Return the properties of the current selection if there's only one item selected\n */\nexport const getSelectionProperties = (state: OgmaState): Array<{key: string; value: any}> => {\n  const uniqSelection = getUniqSelection(state);\n  if (uniqSelection !== undefined) {\n    const properties = uniqSelection.getData().properties;\n    return Object.keys(properties).map((propKey) => {\n      return {\n        key: propKey,\n        value: properties[propKey]\n      };\n    });\n  }\n  return [];\n};\n\n/**\n * Return true if the current selection has properties\n */\nexport const hasSelectionProperties = (state: OgmaState): boolean => {\n  return getSelectionProperties(state).length > 0;\n};\n"]}