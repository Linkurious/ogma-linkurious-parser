{"version":3,"file":"ogma.js","sourceRoot":"","sources":["../../src/ogma/ogma.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * LINKURIOUS CONFIDENTIAL\n * Copyright Linkurious SAS 2012 - 2019\n *\n * Created by andrebarata on 2019-01-08.\n */\n\n'use strict';\n\nimport Ogma from 'ogma';\nimport * as o from 'ogma';\nimport {Filter} from 'types/utilities';\n\nimport {RawNode, NodeList, Node, RawEdge, EdgeList, Edge, RawGraph} from './models';\n\nclass TypedOgma<ND, ED> extends Ogma {\n  addNodes(nodes: RawNode<ND>[], options?: {batchSize?: number}): Promise<NodeList<ND, ED>> {\n    return super.addNodes(nodes, options) as Promise<NodeList<ND, ED>>;\n  }\n  addEdges(edges: RawEdge<ED>[], options?: {batchSize?: number}): Promise<EdgeList<ED, ND>> {\n    return super.addEdges(edges, options) as Promise<EdgeList<ED, ND>>;\n  }\n\n  addNode(node: RawNode<ND>, options?: any): Node<ND, ED> {\n    return super.addNode(node, options) as Node<ND, ED>;\n  }\n\n  addEdge(edge: RawEdge<ED>, options?: any): Edge<ED, ND> {\n    return super.addEdge(edge, options) as Edge<ED, ND>;\n  }\n\n  removeNodes(nodes: NodeList<ND, ED> | Node<ND, ED>[] | o.NodeId[], options?: any): Promise<void> {\n    return super.removeNodes(nodes, options);\n  }\n\n  removeEdges(edges: EdgeList<ED, ND> | Edge<ED, ND>[] | o.EdgeId[], options?: any): Promise<void> {\n    return super.removeEdges(edges, options);\n  }\n\n  removeNode(node: Node<ND, ED> | o.NodeId, options?: any): Promise<void> {\n    return super.removeNode(node, options);\n  }\n\n  removeEdge(edge: Edge<ED, ND> | o.EdgeId, options?: any): Promise<void> {\n    return super.removeEdge(edge, options);\n  }\n\n  getNodes(selector?: o.NodeId[] | Filter | Node<ND, ED>[]): NodeList<ND, ED> {\n    return super.getNodes(selector) as NodeList<ND, ED>;\n  }\n\n  getEdges(selector?: o.EdgeId[] | Filter | Edge<ED, ND>[]): EdgeList<ED, ND> {\n    return super.getEdges(selector) as EdgeList<ED, ND>;\n  }\n\n  getNode(nodeId: o.NodeId): Node<ND, ED> | undefined {\n    return super.getNode(nodeId) as Node<ND, ED> | undefined;\n  }\n\n  getEdge(edgeId: o.EdgeId): Edge<ED, ND> | undefined {\n    return super.getEdge(edgeId) as Edge<ED, ND> | undefined;\n  }\n\n  setGraph(\n    graph: RawGraph<ND, ED>,\n    options?: {\n      batchSize?: number;\n    }\n  ): Promise<{\n    nodes: NodeList<ND, ED>;\n    edges: EdgeList<ED, ND>;\n  }> {\n    return super.setGraph(graph, options) as Promise<{\n      nodes: NodeList<ND, ED>;\n      edges: EdgeList<ED, ND>;\n    }>;\n  }\n\n  addGraph(\n    graph: RawGraph<ND, ED>,\n    options?: {\n      batchSize?: number;\n      locate?: o.LocateOptions;\n    }\n  ): Promise<{\n    nodes: NodeList<ND, ED>;\n    edges: EdgeList<ED, ND>;\n  }> {\n    return super.addGraph(graph, options) as Promise<{\n      nodes: NodeList<ND, ED>;\n      edges: EdgeList<ED, ND>;\n    }>;\n  }\n\n  createNodeList(): NodeList<ND, ED> {\n    return super.createNodeList() as NodeList<ND, ED>;\n  }\n\n  createEdgeList(): EdgeList<ED, ND> {\n    return super.createEdgeList() as EdgeList<ED, ND>;\n  }\n\n  getConnectedComponents(options?: {filter?: Filter; returnIds?: boolean}): NodeList<ND, ED>[] {\n    return super.getConnectedComponents(options) as NodeList<ND, ED>[];\n  }\n\n  getConnectedComponentByNode(\n    node: Node<ND, ED> | o.NodeId,\n    options?: {\n      filter?: Filter;\n      returnIds?: boolean;\n    }\n  ): NodeList<ND, ED> {\n    return super.getConnectedComponentByNode(node, options) as NodeList<ND, ED>;\n  }\n\n  getNodesByClassName(className: string): NodeList<ND, ED> {\n    return super.getNodesByClassName(className) as NodeList<ND, ED>;\n  }\n\n  getEdgesByClassName(className: string): EdgeList<ED, ND> {\n    return super.getEdgesByClassName(className) as EdgeList<ED, ND>;\n  }\n\n  getHoveredElement(): Node<ND, ED> | Edge<ED, ND> | null {\n    return super.getHoveredElement() as Node<ND, ED> | Edge<ED, ND> | null;\n  }\n\n  getPointerInformation(): {\n    x: number;\n    y: number;\n    target: Node<ND, ED> | Edge<ED, ND> | null;\n  } {\n    return super.getPointerInformation() as {\n      x: number;\n      y: number;\n      target: Node<ND, ED> | Edge<ED, ND> | null;\n    };\n  }\n\n  getSelectedNodes(): NodeList<ND, ED> {\n    return super.getSelectedNodes() as NodeList<ND, ED>;\n  }\n  getNonSelectedNodes(): NodeList<ND, ED> {\n    return super.getNonSelectedNodes() as NodeList<ND, ED>;\n  }\n  getSelectedEdges(): EdgeList<ED, ND> {\n    return super.getSelectedEdges() as EdgeList<ED, ND>;\n  }\n  getNonSelectedEdges(): EdgeList<ED, ND> {\n    return super.getNonSelectedEdges() as EdgeList<ED, ND>;\n  }\n}\n\nexport {TypedOgma as Ogma};\n"]}