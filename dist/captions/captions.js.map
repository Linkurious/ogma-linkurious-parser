{"version":3,"file":"captions.js","sourceRoot":"","sources":["../../src/captions/captions.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * LINKURIOUS CONFIDENTIAL\n * Copyright Linkurious SAS 2012 - 2018\n *\n * Created by maximeallex on 2018-05-21.\n */\n\n'use strict';\nimport {\n  CaptionConfig,\n  ItemFieldsCaptions,\n  LkEdgeData,\n  LkNodeData,\n  LkProperty\n} from '@linkurious/rest-client';\n\nimport {CAPTION_HEURISTIC, Tools} from '..';\n\nexport class Captions {\n  /**\n   * Return label for each node\n   */\n  public static getText(\n    itemData: LkNodeData | LkEdgeData,\n    schema: ItemFieldsCaptions\n  ): string | null {\n    const types = 'categories' in itemData ? itemData.categories : [itemData.type];\n    if (Captions.captionExist(types, schema)) {\n      return 'categories' in itemData\n        ? Captions.generateNodeCaption(itemData, schema) || null\n        : Captions.generateEdgeCaption(itemData, schema) || null;\n    }\n    if (itemData.properties !== undefined) {\n      const heuristicCaption = Object.keys(itemData.properties).find((k) =>\n        CAPTION_HEURISTIC.includes(k)\n      );\n      if (\n        heuristicCaption !== undefined &&\n        Tools.isDefined(itemData.properties[heuristicCaption])\n      ) {\n        return `${Tools.getValueFromLkProperty(itemData.properties[heuristicCaption])}`.trim();\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Return a readable string from an LkProperty\n   */\n  private static getLabel(propertyValue: LkProperty): string | null {\n    if (typeof propertyValue === 'object' && 'type' in propertyValue) {\n      if (!('original' in propertyValue) && !('value' in propertyValue)) {\n        return null;\n      }\n      if ('original' in propertyValue) {\n        return `${propertyValue.original}`;\n      }\n      if ('value' in propertyValue) {\n        return Tools.formatDate(\n          new Date(\n            new Date(propertyValue.value).getTime() +\n              Tools.timezoneToMilliseconds(propertyValue.timezone)\n          ).toISOString()\n        );\n      }\n    }\n    return `${propertyValue}`.trim();\n  }\n\n  /**\n   * Return true if caption configuration exists in schema\n   */\n  public static captionExist(itemTypes: Array<string>, schema: ItemFieldsCaptions): boolean {\n    return itemTypes.some((type) => Tools.isDefined(schema[type]));\n  }\n\n  /**\n   * Generate text from node data and captions schema\n   */\n  public static generateNodeCaption(\n    itemData: LkNodeData,\n    schema: {[key: string]: CaptionConfig}\n  ): string {\n    const categories = itemData.categories;\n    const caption: Array<string | null> = [];\n    let captionProps: Array<string | null> = [];\n    categories.forEach((category) => {\n      if (schema[category] && schema[category].active) {\n        if (schema[category].displayName) {\n          caption.push(category);\n        }\n        captionProps = [...captionProps, ...schema[category].properties];\n      }\n    });\n    Tools.uniqBy(captionProps).forEach((propertyKey) => {\n      if (itemData.properties[propertyKey] !== undefined) {\n        caption.push(this.getLabel(itemData.properties[propertyKey]));\n      }\n    });\n    return caption\n      .filter((c) => c !== null)\n      .join(' - ')\n      .trim();\n  }\n\n  /**\n   * Generate text from edge data and captions schema\n   */\n  public static generateEdgeCaption(\n    itemData: LkEdgeData,\n    schema: {[key: string]: CaptionConfig}\n  ): string {\n    const type = itemData.type;\n    const caption: Array<string | null> = [];\n    let captionProps: Array<string | null> = [];\n    if (schema[type] && schema[type].active) {\n      if (schema[type].displayName) {\n        caption.push(type);\n      }\n      captionProps = [...captionProps, ...schema[type].properties];\n      Tools.uniqBy(captionProps).forEach((propertyKey) => {\n        if (Tools.isDefined(itemData.properties[propertyKey])) {\n          caption.push(Captions.getLabel(itemData.properties[propertyKey]));\n        }\n      });\n      return caption.join(' - ').trim();\n    }\n    return '';\n  }\n}\n"]}