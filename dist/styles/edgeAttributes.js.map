{"version":3,"file":"edgeAttributes.js","sourceRoot":"","sources":["../../src/styles/edgeAttributes.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * LINKURIOUS CONFIDENTIAL\n * Copyright Linkurious SAS 2012 - 2018\n *\n * Created by maximeallex on 2018-05-21.\n */\n\n'use strict';\nimport {Color} from 'ogma';\nimport {LkEdgeData, OgmaEdgeShape} from '@linkurious/rest-client';\n\nimport {Tools} from '..';\n\nimport {StyleRule} from './styleRule';\nimport {BASE_GREY, ItemAttributes} from './itemAttributes';\n\nexport class EdgeAttributes extends ItemAttributes {\n  constructor(rulesMap: {\n    color?: Array<StyleRule>;\n    shape?: Array<StyleRule>;\n    width?: Array<StyleRule>;\n  }) {\n    super(rulesMap);\n  }\n\n  /**\n   * Run the callback if an item match with a style in the array of rules\n   */\n  private matchStyle(\n    styleRules: Array<StyleRule>,\n    data: LkEdgeData,\n    callback: (style: StyleRule) => unknown\n  ): void {\n    if (data === undefined) {\n      return;\n    }\n    for (let i = 0; i < styleRules.length; ++i) {\n      if (styleRules[i].canApplyTo(data)) {\n        callback(styleRules[i]);\n        break;\n      }\n    }\n  }\n\n  /**\n   * Generate color for a given node (call only if _rulesMap.color exists)\n   */\n  public color(data: LkEdgeData): Color {\n    if (!Tools.isDefined(data)) {\n      return BASE_GREY;\n    }\n    let color;\n    for (let j = 0; j < this._rulesMap.color!.length; ++j) {\n      const rule = this._rulesMap.color![j];\n      if (rule.canApplyTo(data)) {\n        if (typeof rule.style.color === 'string') {\n          color = rule.style.color;\n        } else if (typeof rule.style.color === 'object') {\n          const propValue = Tools.getInUnsafe(data, rule.style.color.input);\n          color = ItemAttributes.autoColor(`${propValue}`, rule.style.ignoreCase);\n        }\n        break;\n      }\n    }\n    return Tools.isDefined(color) ? color : BASE_GREY;\n  }\n\n  /**\n   * Generate shape for a given node\n   */\n  public shape(data: LkEdgeData): OgmaEdgeShape | undefined {\n    let result = undefined;\n    if (this._rulesMap.shape !== undefined) {\n      this.matchStyle(this._rulesMap.shape, data, (styleRule) => {\n        result = styleRule.style.shape;\n      });\n    }\n    return result;\n  }\n\n  /**\n   * Generate size for a given node\n   */\n  public width(data: LkEdgeData): string | undefined {\n    let result = undefined;\n    if (this._rulesMap.width !== undefined) {\n      this.matchStyle(this._rulesMap.width, data, (styleRule) => {\n        result = styleRule.style.width;\n      });\n    }\n    return result;\n  }\n\n  /**\n   * Return an object containing all node attributes needed by Ogma to style a node\n   */\n  public all(\n    data: LkEdgeData\n  ): {\n    color: Color;\n    shape: OgmaEdgeShape | undefined;\n    width: string | undefined;\n  } {\n    if (!Tools.isDefined(data)) {\n      return {\n        color: BASE_GREY,\n        shape: OgmaEdgeShape.ARROW,\n        width: '100%'\n      };\n    }\n    return {\n      color: this.color(data),\n      shape: this.shape(data),\n      width: this.width(data)\n    };\n  }\n}\n"]}