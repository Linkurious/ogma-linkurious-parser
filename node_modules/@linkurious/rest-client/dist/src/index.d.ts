/**
 * Copyright Linkurious SAS 2012 - 2019
 *
 * - Created on 2019-10-25.
 */
import * as request from 'superagent';
import { ClientState, ModuleProps } from './http/types';
import { ErrorListener } from './errorListener';
import { AccessRightAPI } from './api/AccessRight';
import { AlertAPI } from './api/Alert';
import { ApplicationAPI } from './api/Application';
import { AuthAPI } from './api/Auth';
import { ConfigAPI } from './api/Config';
import { CustomActionAPI } from './api/CustomAction';
import { DataSourceAPI, DataSourceUserInfo } from './api/DataSource';
import { GraphEdgeAPI } from './api/GraphEdge';
import { GraphNodeAPI } from './api/GraphNode';
import { GraphQueryAPI } from './api/GraphQuery';
import { GraphSchemaAPI } from './api/GraphSchema';
import { LinkuriousAPI } from './api/Linkurious';
import { PluginAPI } from './api/Plugin';
import { SearchAPI } from './api/Search';
import { UserAPI } from './api/User';
import { VisualizationAPI } from './api/Visualization';
export declare class RestClient extends ErrorListener {
    readonly clientState: ClientState;
    readonly moduleProps: ModuleProps;
    readonly accessRight: AccessRightAPI;
    readonly alert: AlertAPI;
    readonly application: ApplicationAPI;
    readonly auth: AuthAPI;
    readonly config: ConfigAPI;
    readonly customAction: CustomActionAPI;
    readonly dataSource: DataSourceAPI;
    readonly graphEdge: GraphEdgeAPI;
    readonly graphNode: GraphNodeAPI;
    readonly graphQuery: GraphQueryAPI;
    readonly graphSchema: GraphSchemaAPI;
    readonly linkurious: LinkuriousAPI;
    readonly plugin: PluginAPI;
    readonly search: SearchAPI;
    readonly user: UserAPI;
    readonly visualization: VisualizationAPI;
    constructor(options?: {
        baseUrl?: string;
        agent?: request.SuperAgentStatic;
    });
    /**
     * Login a user and populate the client state with the list of the data-sources.
     */
    init(data: {
        usernameOrEmail: string;
        password: string;
    }): Promise<void>;
    setGuestMode(guestMode: boolean): void;
    setCurrentSource(dataSource: DataSourceUserInfo): void;
    static getCurrentSource(dataSources: DataSourceUserInfo[], by?: {
        userId: number;
    } | {
        sourceKey: string;
    } | {
        configIndex: number;
    }, storage?: Storage): DataSourceUserInfo;
}
