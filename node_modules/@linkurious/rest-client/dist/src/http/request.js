"use strict";
/**
 * Copyright Linkurious SAS 2012 - 2019
 *
 * - Created on 2019-09-26.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var errorListener_1 = require("../errorListener");
var utils_1 = require("../utils");
var response_1 = require("./response");
var Request = /** @class */ (function () {
    function Request(props) {
        this.props = props;
    }
    /**
     * Render `config.url` using `config.params`
     * and subtract the params used from `config.params`.
     */
    Request.renderURL = function (config, moduleProps) {
        // 1) Iterate over path params in route-like format `/:id/`
        var configParams = config.params ? __assign({}, config.params) : {};
        var renderedURL = config.url;
        var regexp = /:[^/]+/g;
        var match;
        while ((match = regexp.exec(config.url)) !== null) {
            var key = match[0].substring(1);
            var paramValue = void 0;
            // 2) Get `sourceKey` value from the ClientState or from the local storage
            if (key === 'sourceKey' && moduleProps.clientState.currentSource) {
                if (moduleProps.clientState.currentSource.key) {
                    paramValue = moduleProps.clientState.currentSource.key;
                }
                else {
                    throw {
                        key: response_1.LkErrorKey.DATA_SOURCE_UNAVAILABLE,
                        message: "Current source \"" + moduleProps.clientState.currentSource.name + "\" is not ready."
                    };
                }
            }
            // 3) Get other param values using `configParams`
            // @ts-ignore
            if (utils_1.hasValue(configParams[key])) {
                // @ts-ignore
                paramValue = configParams[key];
                // @ts-ignore
                delete configParams[key];
            }
            // 4) Replace the value in the url
            if (utils_1.hasValue(paramValue)) {
                renderedURL = renderedURL.replace(':' + key, encodeURIComponent(paramValue));
            }
            else {
                throw new Error("Request::renderURL - You need to set \"" + key + "\" to fetch this API (" + renderedURL + ").");
            }
        }
        return {
            errors: config.errors || [],
            url: renderedURL,
            method: config.method,
            params: configParams
        };
    };
    /**
     * Return object in input with keys transformed from camelCase to snake_case
     */
    Request.toSnakeCaseKeys = function (obj) {
        var result = {};
        for (var key in obj) {
            var fixedKey = key
                .replace(/(^[A-Z])/, function (first) { return first.toLowerCase(); })
                .replace(/([A-Z])/g, function (letter) { return "_" + letter.toLowerCase(); });
            result[fixedKey] = obj[key];
        }
        return result;
    };
    /**
     * Sort `config.params` into `config.body` and `config.query`
     * and set `guest` and `_` query params.
     */
    Request.splitParams = function (config, moduleProps) {
        // 1) Default values for `body` and `query`
        var body;
        var query = {
            _: Date.now(),
            guest: moduleProps.clientState.guestMode ? true : undefined
        };
        // 2) Split params into `body` and `query` depending on the method
        if (utils_1.includes(['GET', 'DELETE'], config.method)) {
            query = __assign(__assign({}, query), config.params);
        }
        else {
            body = config.params;
        }
        // 3) Return a valid fetch config
        return {
            method: config.method,
            url: moduleProps.baseUrl + config.url,
            body: body,
            query: Request.toSnakeCaseKeys(query)
        };
    };
    Request.prototype.request = function (rawFetchConfig) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var requiredConfig, fetchConfig, response, ex_1, error;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        try {
                            requiredConfig = Request.renderURL(rawFetchConfig, this.props);
                        }
                        catch (error) {
                            if (error.key === response_1.LkErrorKey.DATA_SOURCE_UNAVAILABLE) {
                                // 1.a) Return this when currentSource is not connected without performing an HTTP request
                                this.props.dispatchError(error.key, error);
                                return [2 /*return*/, new response_1.Response({ body: error })];
                            }
                            else {
                                // 1.b) Throw an exception when path params are missing
                                throw error;
                            }
                        }
                        fetchConfig = Request.splitParams(requiredConfig, this.props);
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.props.agent[fetchConfig.method.toLowerCase()](fetchConfig.url)
                                .ok(function (res) { return res.status < 500; })
                                .withCredentials()
                                .send(fetchConfig.body)
                                .query(fetchConfig.query)];
                    case 2:
                        response = _b.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        ex_1 = _b.sent();
                        // 4.a) Return error when there is no connection
                        if (!ex_1.response) {
                            error = {
                                key: response_1.LkErrorKey.CONNECTION_REFUSED,
                                message: 'offline',
                                fetchConfig: fetchConfig
                            };
                            this.props.dispatchError(error.key, error);
                            return [2 /*return*/, new response_1.Response({ body: error })];
                        }
                        // 4.b) Throw error if status code is 5xx
                        throw new Error('Internal server error: ' + JSON.stringify(ex_1.response.body));
                    case 4:
                        // From here we only deal with responses with status code lower than 500
                        if (response.body && utils_1.includes(requiredConfig.errors, response.body.key)) {
                            // 4.c) Dispatch server error if expected
                            this.props.dispatchError(response.body.key, response.body);
                            return [2 /*return*/, new response_1.Response({
                                    status: response.status,
                                    header: response.header,
                                    body: response.body
                                })];
                        }
                        else if ((response.status < 200 || response.status >= 300) && ((_a = response.body) === null || _a === void 0 ? void 0 : _a.key)) {
                            // 4.d) Throw error if unexpected
                            throw new errorListener_1.UnexpectedServerError(response);
                        }
                        // 4.e) Throw error if unexpected status code
                        if (!utils_1.includes([200, 201, 204], response.status)) {
                            throw new Error('Unexpected status code "' + response.status + '": ' + JSON.stringify(response.body));
                        }
                        // 4.f) Return the success
                        return [2 /*return*/, new response_1.Response({
                                status: response.status,
                                header: response.header,
                                body: response.body
                            })];
                }
            });
        });
    };
    return Request;
}());
exports.Request = Request;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVxdWVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9odHRwL3JlcXVlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7O0dBSUc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFSCxrREFBdUQ7QUFFdkQsa0NBQTRDO0FBRTVDLHVDQU1vQjtBQUdwQjtJQUNFLGlCQUE0QixLQUFrQjtRQUFsQixVQUFLLEdBQUwsS0FBSyxDQUFhO0lBQUcsQ0FBQztJQUVsRDs7O09BR0c7SUFDWSxpQkFBUyxHQUF4QixVQUNFLE1BQXNCLEVBQ3RCLFdBQXdCO1FBRXhCLDJEQUEyRDtRQUMzRCxJQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsY0FBSyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDN0QsSUFBSSxXQUFXLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQztRQUM3QixJQUFNLE1BQU0sR0FBRyxTQUFTLENBQUM7UUFDekIsSUFBSSxLQUFLLENBQUM7UUFDVixPQUFPLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssSUFBSSxFQUFFO1lBQ2pELElBQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEMsSUFBSSxVQUFVLFNBQW9CLENBQUM7WUFFbkMsMEVBQTBFO1lBQzFFLElBQUksR0FBRyxLQUFLLFdBQVcsSUFBSSxXQUFXLENBQUMsV0FBVyxDQUFDLGFBQWEsRUFBRTtnQkFDaEUsSUFBSSxXQUFXLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUU7b0JBQzdDLFVBQVUsR0FBRyxXQUFXLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUM7aUJBQ3hEO3FC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