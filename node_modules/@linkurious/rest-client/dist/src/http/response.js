"use strict";
/**
 * Copyright Linkurious SAS 2012 - 2019
 *
 * - Created on 2019-10-01.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../utils");
var LkErrorKey;
(function (LkErrorKey) {
    // Not a server error, thrown internally by the rest-client
    LkErrorKey["CONNECTION_REFUSED"] = "connection_refused";
    // Business and access errors
    LkErrorKey["FEATURE_DISABLED"] = "feature_disabled";
    LkErrorKey["UNAUTHORIZED"] = "unauthorized";
    LkErrorKey["DATA_SOURCE_UNAVAILABLE"] = "dataSource_unavailable";
    LkErrorKey["GUEST_DISABLED"] = "guest_disabled";
    LkErrorKey["FORBIDDEN"] = "forbidden";
    LkErrorKey["NOT_FOUND"] = "not_found";
    LkErrorKey["BAD_GRAPH_REQUEST"] = "bad_graph_request";
    LkErrorKey["GRAPH_REQUEST_TIMEOUT"] = "graph_request_timeout";
    LkErrorKey["CONSTRAINT_VIOLATION"] = "constraint_violation";
    LkErrorKey["MALFORMED_CUSTOM_ACTION_TEMPLATE"] = "malformed_custom_action_template";
    LkErrorKey["MALFORMED_QUERY_TEMPLATE"] = "malformed_query_template";
    LkErrorKey["MALFORMED_SEARCH_SYNTAX"] = "malformed_search_syntax";
    LkErrorKey["ILLEGAL_SOURCE_STATE"] = "illegal_source_state";
    LkErrorKey["FOLDER_DELETION_FAILED"] = "folder_deletion_failed";
    LkErrorKey["ALREADY_EXISTS"] = "already_exists";
    LkErrorKey["STRICT_SCHEMA_REQUIRED"] = "strict_schema_required";
    LkErrorKey["PROPERTY_KEY_ACCESS_RIGHTS_REQUIRED"] = "property_key_access_rights_required";
    LkErrorKey["INVALID_PROPERTY_KEY_ACCESS_LEVEL"] = "invalid_property_key_access_level";
    LkErrorKey["EDIT_CONFLICT"] = "edit_conflict";
    LkErrorKey["VISUALIZATION_LOCKED"] = "visualization_locked";
    LkErrorKey["NOT_SUPPORTED"] = "not_supported";
    LkErrorKey["SOURCE_ACTION_NEEDED"] = "source_action_needed";
    // Supposedly not returned by the rest-client
    LkErrorKey["INVALID_PARAMETER"] = "invalid_parameter";
    LkErrorKey["CRITICAL"] = "critical";
    LkErrorKey["BUG"] = "bug";
    LkErrorKey["SOCKET_ERROR"] = "socket_error";
    LkErrorKey["API_NOT_FOUND"] = "api_not_found";
    LkErrorKey["PLUGIN_NOT_READY"] = "plugin_not_ready";
    LkErrorKey["PLUGIN_SERVICE_NOT_READY"] = "plugin_service_not_ready";
})(LkErrorKey = exports.LkErrorKey || (exports.LkErrorKey = {}));
var Response = /** @class */ (function () {
    function Response(options) {
        this.body = options.body;
        this.status = options.status || 0;
        this.header = options.header || {};
    }
    Response.prototype.isSuccess = function () {
        return this.status >= 200 && this.status < 300;
    };
    /**
     * The result of the narrowed down type in type guards works this way
     * type TypeGuard<UnionType, Assertion> = Assertion extends UnionType ? Assertion : (Assertion & UnionType);
     * type t1 = TypeGuard<Response<number> | Response<string>, Response<boolean>>;
     * `t1` equal to `(Response<number> | Response<string>) & Response<boolean>`
     *
     * 1) However, we want `isError()` to narrow down to `never` instead of the `UnionType & Assertion`
     *
     * 2) Why `E` does not extends `PossibleErrorKeys<R>` in the generics?
     * Because having `key : E` in the parameters makes `E` to be equal to `PossibleErrorKeys<R>`
     * instead of the actual type we pass
     *
     * 3) A ternary operator in a parameter works a second checker of the assignment
     * In `key` parameter, `E extends PossibleErrorKeys<R> ? E : never` makes TS to check `E`
     * against `PossibleErrorKeys<R>` and throw a TS error if it's false.
     * `E extends PossibleErrorKeys<R> ? E : PossibleErrorKeys<R>` makes that when it's false, the TS error mentions
     * `PossibleErrorKeys<R>`
     */
    Response.prototype.isError = function (key) {
        return utils_1.hasValue(this.body) && this.body.key === key;
    };
    return Response;
}());
exports.Response = Response;
var UnauthorizedErrorReason;
(function (UnauthorizedErrorReason) {
    UnauthorizedErrorReason["SESSION_EXPIRED"] = "session_expired";
    UnauthorizedErrorReason["SESSION_EVICTED"] = "session_evicted";
    UnauthorizedErrorReason["SERVER_FULL"] = "server_full";
})(UnauthorizedErrorReason = exports.UnauthorizedErrorReason || (exports.UnauthorizedErrorReason = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzcG9uc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaHR0cC9yZXNwb25zZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7R0FJRzs7QUFLSCxrQ0FBa0M7QUFLbEMsSUFBWSxVQW9DWDtBQXBDRCxXQUFZLFVBQVU7SUFDcEIsMkRBQTJEO0lBQzNELHVEQUF5QyxDQUFBO0lBRXpDLDZCQUE2QjtJQUM3QixtREFBcUMsQ0FBQTtJQUNyQywyQ0FBNkIsQ0FBQTtJQUM3QixnRUFBa0QsQ0FBQTtJQUNsRCwrQ0FBaUMsQ0FBQTtJQUNqQyxxQ0FBdUIsQ0FBQTtJQUN2QixxQ0FBdUIsQ0FBQTtJQUN2QixxREFBdUMsQ0FBQTtJQUN2Qyw2REFBK0MsQ0FBQTtJQUMvQywyREFBNkMsQ0FBQTtJQUM3QyxtRkFBcUUsQ0FBQTtJQUNyRSxtRUFBcUQsQ0FBQTtJQUNyRCxpRUFBbUQsQ0FBQTtJQUNuRCwyREFBNkMsQ0FBQTtJQUM3QywrREFBaUQsQ0FBQTtJQUNqRCwrQ0FBaUMsQ0FBQTtJQUNqQywrREFBaUQsQ0FBQTtJQUNqRCx5RkFBMkUsQ0FBQTtJQUMzRSxxRkFBdUUsQ0FBQTtJQUN2RSw2Q0FBK0IsQ0FBQTtJQUMvQiwyREFBNkMsQ0FBQTtJQUM3Qyw2Q0FBK0IsQ0FBQTtJQUMvQiwyREFBNkMsQ0FBQTtJQUU3Qyw2Q0FBNkM7SUFDN0MscURBQXVDLENBQUE7SUFDdkMsbUNBQXFCLENBQUE7SUFDckIseUJBQVcsQ0FBQTtJQUNYLDJDQUE2QixDQUFBO0lBQzdCLDZDQUErQixDQUFBO0lBQy9CLG1EQUFxQyxDQUFBO0lBQ3JDLG1FQUFxRCxDQUFBO0FBQ3ZELENBQUMsRUFwQ1csVUFBVSxHQUFWLGtCQUFVLEtBQVYsa0JBQVUsUUFvQ3JCO0FBVUQ7SUFLRSxrQkFBWSxPQUEyRDtRQUNyRSxJQUFJLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUM7UUFDekIsSUFBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDO0lBQ3JDLENBQUM7SUFFTSw0QkFBUyxHQUFoQjtRQUNFLE9BQU8sSUFBSSxDQUFDLE1BQU0sSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7SUFDakQsQ0FBQztJQUVEOzs7Ozs7Ozs7Ozs7Ozs7OztPQWlCRztJQUNJLDBCQUFPLEdBQWQsVUFFRSxHQUE4RDtRQUU5RCxPQUFPLGdCQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFLLElBQUksQ0FBQyxJQUFnQixDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUM7SUFDbkUsQ0FBQztJQUNILGVBQUM7QUFBRCxDQUFDLEFBdkNELElBdUNDO0FBdkNZLDRCQUFRO0FBd0VyQixJQUFZLHVCQUlYO0FBSkQsV0FBWSx1QkFBdUI7SUFDakMsOERBQW1DLENBQUE7SUFDbkMsOERBQW1DLENBQUE7SUFDbkMsc0RBQTJCLENBQUE7QUFDN0IsQ0FBQyxFQUpXLHVCQUF1QixHQUF2QiwrQkFBdUIsS0FBdkIsK0JBQXVCLFFBSWxDIn0=