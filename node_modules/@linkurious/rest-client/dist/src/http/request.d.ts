/**
 * Copyright Linkurious SAS 2012 - 2019
 *
 * - Created on 2019-09-26.
 */
import { GenericObject } from '../api/commonTypes';
import { ConnectionRefusedError, ErrorResponses, LkErrorKey, Response } from './response';
import { FetchConfig, ModuleProps, RawFetchConfig } from './types';
export declare abstract class Request<S = undefined> {
    readonly props: ModuleProps;
    constructor(props: ModuleProps);
    /**
     * Render `config.url` using `config.params`
     * and subtract the params used from `config.params`.
     */
    private static renderURL;
    /**
     * Return object in input with keys transformed from camelCase to snake_case
     */
    static toSnakeCaseKeys(obj: GenericObject): GenericObject<unknown>;
    /**
     * Sort `config.params` into `config.body` and `config.query`
     * and set `guest` and `_` query params.
     */
    static splitParams(config: Required<RawFetchConfig>, moduleProps: ModuleProps): FetchConfig;
    request<EK extends LkErrorKey = never>(rawFetchConfig: RawFetchConfig<EK>): Promise<ErrorResponses<EK> | Response<ConnectionRefusedError> | Response<S>>;
}
