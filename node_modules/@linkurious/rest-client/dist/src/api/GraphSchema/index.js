"use strict";
/**
 * Copyright Linkurious SAS 2012 - 2019
 *
 * - Created on 2019-05-15.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var request_1 = require("../../http/request");
var response_1 = require("../../http/response");
__export(require("./types"));
var UNAUTHORIZED = response_1.LkErrorKey.UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE = response_1.LkErrorKey.DATA_SOURCE_UNAVAILABLE, GUEST_DISABLED = response_1.LkErrorKey.GUEST_DISABLED, FORBIDDEN = response_1.LkErrorKey.FORBIDDEN, NOT_FOUND = response_1.LkErrorKey.NOT_FOUND, STRICT_SCHEMA_REQUIRED = response_1.LkErrorKey.STRICT_SCHEMA_REQUIRED;
var GraphSchemaAPI = /** @class */ (function (_super) {
    __extends(GraphSchemaAPI, _super);
    function GraphSchemaAPI() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Start the schema sampling.
     */
    GraphSchemaAPI.prototype.startSchemaSampling = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, FORBIDDEN],
            url: '/admin/:sourceKey/schema/sampling/start',
            method: 'POST',
            params: params
        });
    };
    /**
     * Get the schema sampling status.
     */
    GraphSchemaAPI.prototype.getSamplingStatus = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, GUEST_DISABLED],
            url: '/:sourceKey/schema/sampling/status',
            method: 'GET',
            params: params
        });
    };
    /**
     * Stop the schema sampling.
     */
    GraphSchemaAPI.prototype.stopSchemaSampling = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, FORBIDDEN, DATA_SOURCE_UNAVAILABLE],
            url: '/admin/:sourceKey/schema/sampling/stop',
            method: 'POST',
            params: params
        });
    };
    /**
     * List all `edgeTypes`, `nodeCategories`, `edgeProperties`, `nodeProperties`
     * that exist in the graph database.
     */
    GraphSchemaAPI.prototype.getSimpleSchema = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, GUEST_DISABLED],
            url: '/:sourceKey/graph/schema/simple',
            method: 'GET',
            params: params
        });
    };
    /**
     * Update the strict schema settings of the data-source.
     */
    GraphSchemaAPI.prototype.updateSchemaSettings = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, FORBIDDEN, STRICT_SCHEMA_REQUIRED],
            url: '/admin/:sourceKey/graph/schema/settings',
            method: 'PATCH',
            params: params
        });
    };
    /**
     * Get the list of edge properties that are not indexed for the given data-source.
     */
    GraphSchemaAPI.prototype.getNonIndexedEdgeProperties = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, FORBIDDEN, DATA_SOURCE_UNAVAILABLE],
            url: '/admin/source/:sourceKey/noIndex/edgeProperties',
            method: 'GET',
            params: params
        });
    };
    /**
     * Get the list of node properties that are not indexed for the given data-source.
     */
    GraphSchemaAPI.prototype.getNonIndexedNodeProperties = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, FORBIDDEN, DATA_SOURCE_UNAVAILABLE],
            url: '/admin/source/:sourceKey/noIndex/nodeProperties',
            method: 'GET',
            params: params
        });
    };
    /**
     * Set the list of edge properties that are not indexed for the given data-source.
     */
    GraphSchemaAPI.prototype.setNonIndexedEdgeProperties = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, FORBIDDEN, DATA_SOURCE_UNAVAILABLE],
            url: '/admin/source/:sourceKey/noIndex/edgeProperties',
            method: 'PUT',
            params: params
        });
    };
    /**
     * Set the list of node properties that are not indexed for the given data-source.
     */
    GraphSchemaAPI.prototype.setNonIndexedNodeProperties = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, FORBIDDEN, DATA_SOURCE_UNAVAILABLE],
            url: '/admin/source/:sourceKey/noIndex/nodeProperties',
            method: 'PUT',
            params: params
        });
    };
    /**
     * Add a new type to the graph schema.
     */
    GraphSchemaAPI.prototype.createType = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, FORBIDDEN],
            url: '/admin/:sourceKey/graph/schema/:entityType/types',
            method: 'POST',
            params: params
        });
    };
    /**
     * Update an existing graph schema type.
     */
    GraphSchemaAPI.prototype.updateType = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, FORBIDDEN, NOT_FOUND],
            url: '/admin/:sourceKey/graph/schema/:entityType/types',
            method: 'PATCH',
            params: params
        });
    };
    /**
     * Add a new property for a type on the graph schema.
     */
    GraphSchemaAPI.prototype.createProperty = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, FORBIDDEN],
            url: '/admin/:sourceKey/graph/schema/:entityType/properties',
            method: 'POST',
            params: params
        });
    };
    /**
     * Update an existing graph schema property.
     */
    GraphSchemaAPI.prototype.updateProperty = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, FORBIDDEN, NOT_FOUND],
            url: '/admin/:sourceKey/graph/schema/:entityType/properties',
            method: 'PATCH',
            params: params
        });
    };
    /**
     * List all the types and properties of a data-source.
     */
    GraphSchemaAPI.prototype.getTypes = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, FORBIDDEN],
            url: '/admin/:sourceKey/graph/schema/:entityType/types',
            method: 'GET',
            params: params
        });
    };
    /**
     * List all the readable types and properties of a data-source.
     */
    GraphSchemaAPI.prototype.getTypesWithAccess = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, GUEST_DISABLED],
            url: '/:sourceKey/graph/schema/:entityType/types',
            method: 'GET',
            params: params
        });
    };
    return GraphSchemaAPI;
}(request_1.Request));
exports.GraphSchemaAPI = GraphSchemaAPI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpL0dyYXBoU2NoZW1hL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7OztHQUlHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFSCw4Q0FBMkM7QUFDM0MsZ0RBQStDO0FBb0IvQyw2QkFBd0I7QUFHdEIsSUFBQSxpREFBWSxFQUNaLHVFQUF1QixFQUN2QixxREFBYyxFQUNkLDJDQUFTLEVBQ1QsMkNBQVMsRUFDVCxxRUFBc0IsQ0FDVDtBQUVmO0lBQW9DLGtDQUFPO0lBQTNDOztJQXFMQSxDQUFDO0lBcExDOztPQUVHO0lBQ0ksNENBQW1CLEdBQTFCLFVBQTJCLE1BQW1DO1FBQzVELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNsQixNQUFNLEVBQUUsQ0FBQyxZQUFZLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxDQUFDO1lBQzFELEdBQUcsRUFBRSx5Q0FBeUM7WUFDOUMsTUFBTSxFQUFFLE1BQU07WUFDZCxNQUFNLEVBQUUsTUFBTTtTQUNmLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7T0FFRztJQUNJLDBDQUFpQixHQUF4QixVQUFtRSxNQUEwQjtRQUMzRixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDbEIsTUFBTSxFQUFFLENBQUMsWUFBWSxFQUFFLHVCQUF1QixFQUFFLGNBQWMsQ0FBQztZQUMvRCxHQUFHLEVBQUUsb0NBQW9DO1lBQ3pDLE1BQU0sRUFBRSxLQUFLO1lBQ2IsTUFBTSxFQUFFLE1BQU07U0FDZixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSSwyQ0FBa0IsR0FBekIsVUFBMEIsTUFBMEI7UUFDbEQsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ2xCLE1BQU0sRUFBRSxDQUFDLFlBQVksRUFBRSxTQUFTLEVBQUUsdUJBQXVCLENBQUM7WUFDMUQsR0FBRyxFQUFFLHdDQUF3QztZQUM3QyxNQUFNLEVB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