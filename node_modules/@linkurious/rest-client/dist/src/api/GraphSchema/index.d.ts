/**
 * Copyright Linkurious SAS 2012 - 2019
 *
 * - Created on 2019-05-15.
 */
import { Request } from '../../http/request';
import { IDataSourceParams } from '../commonTypes';
import { GetSamplingStatusResponse, GraphSchema, GraphSchemaProperty, GraphSchemaType, GraphSchemaWithAccess, ICreatePropertyParams, ICreateTypeParams, IGetTypesParams, ISetNonIndexedPropertiesParams, IStartSchemaSamplingParams, IUpdatePropertyParams, IUpdateSchemaSettingsParams, IUpdateTypeParams, SimpleSchema } from './types';
export * from './types';
export declare class GraphSchemaAPI extends Request {
    /**
     * Start the schema sampling.
     */
    startSchemaSampling(params?: IStartSchemaSamplingParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<undefined>>;
    /**
     * Get the schema sampling status.
     */
    getSamplingStatus(this: Request<GetSamplingStatusResponse>, params?: IDataSourceParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").GuestDisabledError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<GetSamplingStatusResponse>>;
    /**
     * Stop the schema sampling.
     */
    stopSchemaSampling(params?: IDataSourceParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<undefined>>;
    /**
     * List all `edgeTypes`, `nodeCategories`, `edgeProperties`, `nodeProperties`
     * that exist in the graph database.
     */
    getSimpleSchema(this: Request<SimpleSchema>, params?: IDataSourceParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").GuestDisabledError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<SimpleSchema>>;
    /**
     * Update the strict schema settings of the data-source.
     */
    updateSchemaSettings(params: IUpdateSchemaSettingsParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").StrictSchemaRequiredError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<undefined>>;
    /**
     * Get the list of edge properties that are not indexed for the given data-source.
     */
    getNonIndexedEdgeProperties(this: Request<string[]>, params?: IDataSourceParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<string[]>>;
    /**
     * Get the list of node properties that are not indexed for the given data-source.
     */
    getNonIndexedNodeProperties(this: Request<string[]>, params?: IDataSourceParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<string[]>>;
    /**
     * Set the list of edge properties that are not indexed for the given data-source.
     */
    setNonIndexedEdgeProperties(params: ISetNonIndexedPropertiesParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<undefined>>;
    /**
     * Set the list of node properties that are not indexed for the given data-source.
     */
    setNonIndexedNodeProperties(params: ISetNonIndexedPropertiesParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<undefined>>;
    /**
     * Add a new type to the graph schema.
     */
    createType(this: Request<GraphSchemaType>, params: ICreateTypeParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<GraphSchemaType>>;
    /**
     * Update an existing graph schema type.
     */
    updateType(params: IUpdateTypeParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").NotFoundError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<undefined>>;
    /**
     * Add a new property for a type on the graph schema.
     */
    createProperty(this: Request<GraphSchemaProperty>, params: ICreatePropertyParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<GraphSchemaProperty>>;
    /**
     * Update an existing graph schema property.
     */
    updateProperty(params: IUpdatePropertyParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").NotFoundError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<undefined>>;
    /**
     * List all the types and properties of a data-source.
     */
    getTypes(this: Request<GraphSchema>, params: IGetTypesParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<GraphSchema>>;
    /**
     * List all the readable types and properties of a data-source.
     */
    getTypesWithAccess(this: Request<GraphSchemaWithAccess>, params: IGetTypesParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").GuestDisabledError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<GraphSchemaWithAccess>>;
}
