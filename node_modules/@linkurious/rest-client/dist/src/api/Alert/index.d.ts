/**
 * Copyright Linkurious SAS 2012 - 2019
 *
 * - Created on 2019-10-30.
 */
import { Request } from '../../http/request';
import { IDataSourceParams } from '../commonTypes';
import { AlertTree, ICreateAlertFolderParams, ICreateAlertParams, IDeleteAlertFolderParams, IDeleteAlertParams, IDoMatchActionParams, IGetAlertParams, IGetMatchActionsParams, IGetMatchesParams, IGetMatchParams, IUpdateAlertFolderParams, IUpdateAlertParams, AlertPreview, IAlertPreviewParams, Alert, AlertFolder, MatchAction, Match, GetMatchesResponse } from './types';
export * from './types';
export declare class AlertAPI extends Request {
    /**
     * Create a new alert. If `matchTTL` is set to 0, unconfirmed matches
     * will disappear when they stop matching the alert query.
     */
    createAlert(this: Request<Alert>, params: ICreateAlertParams): Promise<import("../../http/response").Response<import("../../http/response").FeatureDisabledError> | import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<Alert>>;
    /**
     * Update the alert selected by id.
     * Updating an alert query will results in all the previous detected matches deleted.
     */
    updateAlert(this: Request<Alert>, params: IUpdateAlertParams): Promise<import("../../http/response").Response<import("../../http/response").FeatureDisabledError> | import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").NotFoundError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<Alert>>;
    /**
     * Delete the alert by id and all its matches.
     */
    deleteAlert(params: IDeleteAlertParams): Promise<import("../../http/response").Response<import("../../http/response").FeatureDisabledError> | import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").NotFoundError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<undefined>>;
    /**
     * Create an alert folder.
     */
    createAlertFolder(this: Request<AlertFolder>, params: ICreateAlertFolderParams): Promise<import("../../http/response").Response<import("../../http/response").FeatureDisabledError> | import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").AlreadyExistsError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<AlertFolder>>;
    /**
     * Update an alert folder.
     */
    updateAlertFolder(this: Request<AlertFolder>, params: IUpdateAlertFolderParams): Promise<import("../../http/response").Response<import("../../http/response").FeatureDisabledError> | import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").NotFoundError> | import("../../http/response").Response<import("../../http/response").AlreadyExistsError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<AlertFolder>>;
    /**
     * Delete an alert folder.
     */
    deleteAlertFolder(params: IDeleteAlertFolderParams): Promise<import("../../http/response").Response<import("../../http/response").FeatureDisabledError> | import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").NotFoundError> | import("../../http/response").Response<import("../../http/response").FolderDeletionFailedError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<undefined>>;
    /**
     * Get the alerts and the alert folders in a tree structure.
     */
    getAlertTree(this: Request<AlertTree>, params?: IDataSourceParams): Promise<import("../../http/response").Response<import("../../http/response").FeatureDisabledError> | import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<AlertTree>>;
    /**
     * Get an alert by id.
     */
    getAlert(this: Request<Alert>, params: IGetAlertParams): Promise<import("../../http/response").Response<import("../../http/response").FeatureDisabledError> | import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").NotFoundError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<Alert>>;
    /**
     * Get a match by id.
     */
    getMatch(this: Request<Match>, params: IGetMatchParams): Promise<import("../../http/response").Response<import("../../http/response").FeatureDisabledError> | import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").NotFoundError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<Match>>;
    /**
     * Get all the matches of an alert.
     */
    getMatches(this: Request<GetMatchesResponse>, params: IGetMatchesParams): Promise<import("../../http/response").Response<import("../../http/response").FeatureDisabledError> | import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").NotFoundError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<GetMatchesResponse>>;
    /**
     * Get all the actions of a match ordered by creation date.
     */
    getMatchActions(this: Request<MatchAction[]>, params: IGetMatchActionsParams): Promise<import("../../http/response").Response<import("../../http/response").FeatureDisabledError> | import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").NotFoundError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<MatchAction[]>>;
    /**
     * Do an action (open, dismiss, confirm, unconfirm) on a match.
     */
    doMatchAction(params: IDoMatchActionParams): Promise<import("../../http/response").Response<import("../../http/response").FeatureDisabledError> | import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").NotFoundError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<undefined>>;
    /**
     * Get all the nodes and edges matching the given graph query.
     * An array of subgraphs, one for each subgraph matching the graph query, is returned.
     */
    alertPreview(this: Request<AlertPreview>, params: IAlertPreviewParams): Promise<import("../../http/response").Response<import("../../http/response").FeatureDisabledError> | import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").BadGraphRequestError> | import("../../http/response").Response<import("../../http/response").GraphRequestTimeoutError> | import("../../http/response").Response<import("../../http/response").ConstraintViolationError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<AlertPreview>>;
}
