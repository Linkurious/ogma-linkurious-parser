"use strict";
/**
 * Copyright Linkurious SAS 2012 - 2019
 *
 * - Created on 2019-10-30.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var request_1 = require("../../http/request");
var response_1 = require("../../http/response");
__export(require("./types"));
var FEATURE_DISABLED = response_1.LkErrorKey.FEATURE_DISABLED, UNAUTHORIZED = response_1.LkErrorKey.UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE = response_1.LkErrorKey.DATA_SOURCE_UNAVAILABLE, FORBIDDEN = response_1.LkErrorKey.FORBIDDEN, NOT_FOUND = response_1.LkErrorKey.NOT_FOUND, BAD_GRAPH_REQUEST = response_1.LkErrorKey.BAD_GRAPH_REQUEST, GRAPH_REQUEST_TIMEOUT = response_1.LkErrorKey.GRAPH_REQUEST_TIMEOUT, CONSTRAINT_VIOLATION = response_1.LkErrorKey.CONSTRAINT_VIOLATION, FOLDER_DELETION_FAILED = response_1.LkErrorKey.FOLDER_DELETION_FAILED, ALREADY_EXISTS = response_1.LkErrorKey.ALREADY_EXISTS;
var AlertAPI = /** @class */ (function (_super) {
    __extends(AlertAPI, _super);
    function AlertAPI() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a new alert. If `matchTTL` is set to 0, unconfirmed matches
     * will disappear when they stop matching the alert query.
     */
    AlertAPI.prototype.createAlert = function (params) {
        return this.request({
            errors: [FEATURE_DISABLED, UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, FORBIDDEN],
            url: '/admin/:sourceKey/alerts',
            method: 'POST',
            params: params
        });
    };
    /**
     * Update the alert selected by id.
     * Updating an alert query will results in all the previous detected matches deleted.
     */
    AlertAPI.prototype.updateAlert = function (params) {
        return this.request({
            errors: [FEATURE_DISABLED, UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, FORBIDDEN, NOT_FOUND],
            url: '/admin/:sourceKey/alerts/:id',
            method: 'PATCH',
            params: params
        });
    };
    /**
     * Delete the alert by id and all its matches.
     */
    AlertAPI.prototype.deleteAlert = function (params) {
        return this.request({
            errors: [FEATURE_DISABLED, UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, FORBIDDEN, NOT_FOUND],
            url: '/admin/:sourceKey/alerts/:id',
            method: 'DELETE',
            params: params
        });
    };
    /**
     * Create an alert folder.
     */
    AlertAPI.prototype.createAlertFolder = function (params) {
        return this.request({
            errors: [FEATURE_DISABLED, UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, FORBIDDEN, ALREADY_EXISTS],
            url: '/admin/:sourceKey/alerts/folder',
            method: 'POST',
            params: params
        });
    };
    /**
     * Update an alert folder.
     */
    AlertAPI.prototype.updateAlertFolder = function (params) {
        return this.request({
            errors: [
                FEATURE_DISABLED,
                UNAUTHORIZED,
                DATA_SOURCE_UNAVAILABLE,
                FORBIDDEN,
                NOT_FOUND,
                ALREADY_EXISTS
            ],
            url: '/admin/:sourceKey/alerts/folder/:id',
            method: 'PATCH',
            params: params
        });
    };
    /**
     * Delete an alert folder.
     */
    AlertAPI.prototype.deleteAlertFolder = function (params) {
        return this.request({
            errors: [
                FEATURE_DISABLED,
                UNAUTHORIZED,
                DATA_SOURCE_UNAVAILABLE,
                FORBIDDEN,
                NOT_FOUND,
                FOLDER_DELETION_FAILED
            ],
            url: '/admin/:sourceKey/alerts/folder/:id',
            method: 'DELETE',
            params: params
        });
    };
    /**
     * Get the alerts and the alert folders in a tree structure.
     */
    AlertAPI.prototype.getAlertTree = function (params) {
        return this.request({
            errors: [FEATURE_DISABLED, UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, FORBIDDEN],
            url: '/:sourceKey/alerts/tree',
            method: 'GET',
            params: params
        });
    };
    /**
     * Get an alert by id.
     */
    AlertAPI.prototype.getAlert = function (params) {
        return this.request({
            errors: [FEATURE_DISABLED, UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, FORBIDDEN, NOT_FOUND],
            url: '/:sourceKey/alerts/:id',
            method: 'GET',
            params: params
        });
    };
    /**
     * Get a match by id.
     */
    AlertAPI.prototype.getMatch = function (params) {
        return this.request({
            errors: [FEATURE_DISABLED, UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, FORBIDDEN, NOT_FOUND],
            url: '/:sourceKey/alerts/:alertId/matches/:matchId',
            method: 'GET',
            params: params
        });
    };
    /**
     * Get all the matches of an alert.
     */
    AlertAPI.prototype.getMatches = function (params) {
        return this.request({
            errors: [FEATURE_DISABLED, UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, FORBIDDEN, NOT_FOUND],
            url: '/:sourceKey/alerts/:alertId/matches',
            method: 'GET',
            params: params
        });
    };
    /**
     * Get all the actions of a match ordered by creation date.
     */
    AlertAPI.prototype.getMatchActions = function (params) {
        return this.request({
            errors: [FEATURE_DISABLED, UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, FORBIDDEN, NOT_FOUND],
            url: '/:sourceKey/alerts/:alertId/matches/:matchId/actions',
            method: 'GET',
            params: params
        });
    };
    /**
     * Do an action (open, dismiss, confirm, unconfirm) on a match.
     */
    AlertAPI.prototype.doMatchAction = function (params) {
        return this.request({
            errors: [FEATURE_DISABLED, UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, FORBIDDEN, NOT_FOUND],
            url: '/:sourceKey/alerts/:alertId/matches/:matchId/action',
            method: 'POST',
            params: params
        });
    };
    /**
     * Get all the nodes and edges matching the given graph query.
     * An array of subgraphs, one for each subgraph matching the graph query, is returned.
     */
    AlertAPI.prototype.alertPreview = function (params) {
        return this.request({
            errors: [
                FEATURE_DISABLED,
                UNAUTHORIZED,
                DATA_SOURCE_UNAVAILABLE,
                FORBIDDEN,
                BAD_GRAPH_REQUEST,
                GRAPH_REQUEST_TIMEOUT,
                CONSTRAINT_VIOLATION
            ],
            url: '/:sourceKey/graph/alertPreview',
            method: 'POST',
            params: params
        });
    };
    return AlertAPI;
}(request_1.Request));
exports.AlertAPI = AlertAPI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpL0FsZXJ0L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7OztHQUlHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFSCw4Q0FBMkM7QUFDM0MsZ0RBQStDO0FBeUIvQyw2QkFBd0I7QUFHdEIsSUFBQSx5REFBZ0IsRUFDaEIsaURBQVksRUFDWix1RUFBdUIsRUFDdkIsMkNBQVMsRUFDVCwyQ0FBUyxFQUNULDJEQUFpQixFQUNqQixtRUFBcUIsRUFDckIsaUVBQW9CLEVBQ3BCLHFFQUFzQixFQUN0QixxREFBYyxDQUNEO0FBRWY7SUFBOEIsNEJBQU87SUFBckM7O0lBcUxBLENBQUM7SUFwTEM7OztPQUdHO0lBQ0ksOEJBQVcsR0FBbEIsVUFBeUMsTUFBMEI7UUFDakUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ2xCLE1BQU0sRUFBRSxDQUFDLGdCQUFnQixFQUFFLFlBQVksRUFBRSx1QkFBdUIsRUFBRSxTQUFTLENBQUM7WUFDNUUsR0FBRyxFQUFFLDBCQUEwQjtZQUMvQixNQUFNLEVBQUUsTUFBTTtZQUNkLE1BQU0sRUFBRSxNQUFNO1NBQ2YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOzs7T0FHRztJQUNJLDhCQUFXLEdBQWxCLFVBQXlDLE1BQTBCO1FBQ2pFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNsQixNQUFNLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxZQUFZLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFNBQVMsQ0FBQztZQUN2RixHQUFHLEVBQUUsOEJBQThCO1lBQ25DLE1BQU0sRUFBRSxPQUFPO1lBQ2YsTUFBTSxFQUFFLE1BQU07U0FDZixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSSw4QkFBVyxHQUFsQixVQUFtQixNQUEwQjtRQUMzQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDbEIsTUFB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