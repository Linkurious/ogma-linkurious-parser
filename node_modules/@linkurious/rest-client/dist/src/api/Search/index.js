"use strict";
/**
 * Copyright Linkurious SAS 2012 - 2019
 *
 * - Created on 2019-10-30.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var request_1 = require("../../http/request");
var response_1 = require("../../http/response");
__export(require("./types"));
var UNAUTHORIZED = response_1.LkErrorKey.UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE = response_1.LkErrorKey.DATA_SOURCE_UNAVAILABLE, GUEST_DISABLED = response_1.LkErrorKey.GUEST_DISABLED, FORBIDDEN = response_1.LkErrorKey.FORBIDDEN, ILLEGAL_SOURCE_STATE = response_1.LkErrorKey.ILLEGAL_SOURCE_STATE, SOURCE_ACTION_NEEDED = response_1.LkErrorKey.SOURCE_ACTION_NEEDED, MALFORMED_SEARCH_SYNTAX = response_1.LkErrorKey.MALFORMED_SEARCH_SYNTAX;
var SearchAPI = /** @class */ (function (_super) {
    __extends(SearchAPI, _super);
    function SearchAPI() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Start the indexation.
     * The API doesn't wait for the indexation to finish.
     */
    SearchAPI.prototype.startIndexation = function (params) {
        return this.request({
            errors: [
                UNAUTHORIZED,
                DATA_SOURCE_UNAVAILABLE,
                FORBIDDEN,
                ILLEGAL_SOURCE_STATE,
                SOURCE_ACTION_NEEDED
            ],
            url: '/:sourceKey/search/index',
            method: 'POST',
            params: params
        });
    };
    /**
     * Get the indexation status for a given data-source.
     */
    SearchAPI.prototype.getIndexationStatus = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, GUEST_DISABLED],
            url: '/:sourceKey/search/status',
            method: 'GET',
            params: params
        });
    };
    /**
     * Perform a search of nodes or edges based on a search query, a fuzziness value and filters.
     * The list of items that matched the search query is returned.
     */
    SearchAPI.prototype.search = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, GUEST_DISABLED, MALFORMED_SEARCH_SYNTAX],
            url: '/:sourceKey/search/:type',
            method: 'POST',
            params: params
        });
    };
    /**
     * Perform a search of nodes or edges based on a search query, a fuzziness value and filters.
     * A subgraph made of the items that matched the search query and the edges between them is returned.
     */
    SearchAPI.prototype.searchFull = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, GUEST_DISABLED, MALFORMED_SEARCH_SYNTAX],
            url: '/:sourceKey/search/:type/full',
            method: 'POST',
            params: params
        });
    };
    return SearchAPI;
}(request_1.Request));
exports.SearchAPI = SearchAPI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpL1NlYXJjaC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7R0FJRzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUgsOENBQTJDO0FBQzNDLGdEQUErQztBQVcvQyw2QkFBd0I7QUFHdEIsSUFBQSxpREFBWSxFQUNaLHVFQUF1QixFQUN2QixxREFBYyxFQUNkLDJDQUFTLEVBQ1QsaUVBQW9CLEVBQ3BCLGlFQUFvQixFQUNwQix1RUFBdUIsQ0FDVjtBQUVmO0lBQStCLDZCQUFPO0lBQXRDOztJQTREQSxDQUFDO0lBM0RDOzs7T0FHRztJQUNJLG1DQUFlLEdBQXRCLFVBQXVCLE1BQTBCO1FBQy9DLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNsQixNQUFNLEVBQUU7Z0JBQ04sWUFBWTtnQkFDWix1QkFBdUI7Z0JBQ3ZCLFNBQVM7Z0JBQ1Qsb0JBQW9CO2dCQUNwQixvQkFBb0I7YUFDckI7WUFDRCxHQUFHLEVBQUUsMEJBQTBCO1lBQy9CLE1BQU0sRUFBRSxNQUFNO1lBQ2QsTUFBTSxFQUFFLE1BQU07U0FDZixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSSx1Q0FBbUIsR0FBMUIsVUFFRSxNQUEwQjtRQUUxQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDbEIsTUFBTSxFQUFFLENBQUMsWUFBWSxFQUFFLHVCQUF1QixFQUFFLGNBQWMsQ0FBQztZQUMvRCxHQUFHLEVBQUUsMkJBQTJCO1lBQ2hDLE1BQU0sRUFBRSxLQUFLO1lBQ2IsTUFBTSxFQUFFLE1BQU07U0FDZixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksMEJBQU0sR0FBYixVQUE2QyxNQUFxQjtRQUNoRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDbEIsTUFBTSxFQUFFLENBQUMsWUFBWSxFQUFFLHVCQUF1QixFQUFFLGNBQWMsRUFBRSx1QkFBdUIsQ0FBQztZQUN4RixHQUFHLEVBQUUsMEJBQTBCO1lBQy9CLE1BQU0sRUFBRSxNQUFNO1lBQ2QsTUFBTSxFQUFFLE1BQU07U0FDZixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksOEJBQVUsR0FBakIsVUFBNkMsTUFBeUI7UUFDcEUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ2xCLE1BQU0sRUFBRSxDQUFDLFlBQVksRUFBRSx1QkFBdUIsRUFBRSxjQUFjLEVBQUUsdUJBQXVCLENBQUM7WUFDeEYsR0FBRyxFQUFFLCtCQUErQjtZQUNwQyxNQUFNLEVBQUUsTUFBTTtZQUNkLE1BQU0sRUFBRSxNQUFNO1NBQ2YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUNILGdCQUFDO0FBQUQsQ0FBQyxBQTVERCxDQUErQixpQkFBTyxHQTREckM7QUE1RFksOEJBQVMifQ==