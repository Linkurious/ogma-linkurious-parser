/**
 * Copyright Linkurious SAS 2012 - 2019
 *
 * - Created on 2019-10-30.
 */
import { Request } from '../../http/request';
import { LkSubGraph } from '../graphItemTypes';
import { IDataSourceParams } from '../commonTypes';
import { GetIndexationStatusResponse, ISearchFullParams, ISearchParams, SearchResponse } from './types';
export * from './types';
export declare class SearchAPI extends Request {
    /**
     * Start the indexation.
     * The API doesn't wait for the indexation to finish.
     */
    startIndexation(params?: IDataSourceParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").IllegalSourceStateError> | import("../../http/response").Response<import("../../http/response").SourceActionNeededError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<undefined>>;
    /**
     * Get the indexation status for a given data-source.
     */
    getIndexationStatus(this: Request<GetIndexationStatusResponse>, params?: IDataSourceParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").GuestDisabledError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<GetIndexationStatusResponse>>;
    /**
     * Perform a search of nodes or edges based on a search query, a fuzziness value and filters.
     * The list of items that matched the search query is returned.
     */
    search(this: Request<SearchResponse>, params: ISearchParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").GuestDisabledError> | import("../../http/response").Response<import("../../http/response").MalformedSearchSyntaxError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<SearchResponse>>;
    /**
     * Perform a search of nodes or edges based on a search query, a fuzziness value and filters.
     * A subgraph made of the items that matched the search query and the edges between them is returned.
     */
    searchFull(this: Request<LkSubGraph>, params: ISearchFullParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").GuestDisabledError> | import("../../http/response").Response<import("../../http/response").MalformedSearchSyntaxError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<LkSubGraph>>;
}
