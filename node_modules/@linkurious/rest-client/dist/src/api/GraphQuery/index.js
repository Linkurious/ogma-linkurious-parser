"use strict";
/**
 * Copyright Linkurious SAS 2012 - 2019
 *
 * - Created on 2019-10-29.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var request_1 = require("../../http/request");
var response_1 = require("../../http/response");
__export(require("./types"));
var UNAUTHORIZED = response_1.LkErrorKey.UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE = response_1.LkErrorKey.DATA_SOURCE_UNAVAILABLE, GUEST_DISABLED = response_1.LkErrorKey.GUEST_DISABLED, FORBIDDEN = response_1.LkErrorKey.FORBIDDEN, NOT_FOUND = response_1.LkErrorKey.NOT_FOUND, BAD_GRAPH_REQUEST = response_1.LkErrorKey.BAD_GRAPH_REQUEST, GRAPH_REQUEST_TIMEOUT = response_1.LkErrorKey.GRAPH_REQUEST_TIMEOUT, CONSTRAINT_VIOLATION = response_1.LkErrorKey.CONSTRAINT_VIOLATION, MALFORMED_QUERY_TEMPLATE = response_1.LkErrorKey.MALFORMED_QUERY_TEMPLATE;
var GraphQueryAPI = /** @class */ (function (_super) {
    __extends(GraphQueryAPI, _super);
    function GraphQueryAPI() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get a graph query owned by the current user or shared with it.
     */
    GraphQueryAPI.prototype.getQuery = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, GUEST_DISABLED, FORBIDDEN, NOT_FOUND],
            url: '/:sourceKey/graph/query/:id',
            method: 'GET',
            params: params
        });
    };
    /**
     * Get all the graph queries owned by the current user or shared with it.
     */
    GraphQueryAPI.prototype.getQueries = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, GUEST_DISABLED, FORBIDDEN],
            url: '/:sourceKey/graph/query',
            method: 'GET',
            params: params
        });
    };
    /**
     * Create a graph query for the current user.
     */
    GraphQueryAPI.prototype.createQuery = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, FORBIDDEN, MALFORMED_QUERY_TEMPLATE],
            url: '/:sourceKey/graph/query',
            method: 'POST',
            params: params
        });
    };
    /**
     * Update a graph query owned by the current user.
     */
    GraphQueryAPI.prototype.updateQuery = function (params) {
        return this.request({
            errors: [
                UNAUTHORIZED,
                DATA_SOURCE_UNAVAILABLE,
                FORBIDDEN,
                NOT_FOUND,
                MALFORMED_QUERY_TEMPLATE
            ],
            url: '/:sourceKey/graph/query/:id',
            method: 'PATCH',
            params: params
        });
    };
    /**
     * Delete a graph query owned by the current user.
     */
    GraphQueryAPI.prototype.deleteQuery = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, FORBIDDEN, NOT_FOUND],
            url: '/:sourceKey/graph/query/:id',
            method: 'DELETE',
            params: params
        });
    };
    /**
     * Check that the given graph query is syntactically correct. Parse the query if it's a template.
     */
    GraphQueryAPI.prototype.checkQuery = function (params) {
        return this.request({
            errors: [
                UNAUTHORIZED,
                DATA_SOURCE_UNAVAILABLE,
                FORBIDDEN,
                BAD_GRAPH_REQUEST,
                GRAPH_REQUEST_TIMEOUT,
                CONSTRAINT_VIOLATION,
                MALFORMED_QUERY_TEMPLATE
            ],
            url: '/:sourceKey/graph/check/query',
            method: 'POST',
            params: params
        });
    };
    /**
     * Get all the nodes and edges matching the given graph query.
     * A subgraph made of all the nodes and the edges from each subgraph matching the graph query is returned.
     */
    GraphQueryAPI.prototype.runQuery = function (params) {
        return this.request({
            errors: [
                UNAUTHORIZED,
                DATA_SOURCE_UNAVAILABLE,
                FORBIDDEN,
                NOT_FOUND,
                BAD_GRAPH_REQUEST,
                GRAPH_REQUEST_TIMEOUT,
                CONSTRAINT_VIOLATION,
                MALFORMED_QUERY_TEMPLATE
            ],
            url: '/:sourceKey/graph/run/query',
            method: 'POST',
            params: params
        });
    };
    /**
     * Get all the nodes and edges matching the given saved graph query by id.
     * A subgraph made of all the nodes and the edges from each subgraph matching the graph query is returned.
     */
    GraphQueryAPI.prototype.runQueryById = function (params) {
        return this.request({
            errors: [
                UNAUTHORIZED,
                DATA_SOURCE_UNAVAILABLE,
                GUEST_DISABLED,
                FORBIDDEN,
                NOT_FOUND,
                BAD_GRAPH_REQUEST,
                GRAPH_REQUEST_TIMEOUT,
                CONSTRAINT_VIOLATION
            ],
            url: '/:sourceKey/graph/run/query/:id',
            method: 'POST',
            params: params
        });
    };
    return GraphQueryAPI;
}(request_1.Request));
exports.GraphQueryAPI = GraphQueryAPI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpL0dyYXBoUXVlcnkvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7O0dBSUc7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVILDhDQUEyQztBQUMzQyxnREFBK0M7QUFnQi9DLDZCQUF3QjtBQUd0QixJQUFBLGlEQUFZLEVBQ1osdUVBQXVCLEVBQ3ZCLHFEQUFjLEVBQ2QsMkNBQVMsRUFDVCwyQ0FBUyxFQUNULDJEQUFpQixFQUNqQixtRUFBcUIsRUFDckIsaUVBQW9CLEVBQ3BCLHlFQUF3QixDQUNYO0FBRWY7SUFBbUMsaUNBQU87SUFBMUM7O0lBa0lBLENBQUM7SUFqSUM7O09BRUc7SUFDSSxnQ0FBUSxHQUFmLFVBQTJDLE1BQXVCO1FBQ2hFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNsQixNQUFNLEVBQUUsQ0FBQyxZQUFZLEVBQUUsdUJBQXVCLEVBQUUsY0FBYyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUM7WUFDckYsR0FBRyxFQUFFLDZCQUE2QjtZQUNsQyxNQUFNLEVBQUUsS0FBSztZQUNiLE1BQU0sRUFBRSxNQUFNO1NBQ2YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOztPQUVHO0lBQ0ksa0NBQVUsR0FBakIsVUFBK0MsTUFBeUI7UUFDdEUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ2xCLE1BQU0sRUFBRSxDQUFDLFlBQVksRUFBRSx1QkFBdUIsRUFBRSxjQUFjLEVBQUUsU0FBUyxDQUFDO1lBQzFFLEdBQUcsRUFBRSx5QkFBeUI7WUFDOUIsTUFBTSxFQUFFLEtBQUs7WUFDYixNQUFNLEVBQUUsTUFBTTtTQUNmLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7T0FFRztJQUNJLG1DQUFXLEdBQWxCLFVBQThDLE1BQTBCO1FBQ3RFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNsQixNQUFNLEVBQUUsQ0FBQyxZQUFZLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLHdCQUF3QixDQUFDO1lBQ3BGLEdBQUcsRUFBRSx5QkFBeUI7WUFDOUIsTUFBTSxFQUFFLE1BQU07WUFDZCxNQUFNLEVBQUUsTUFBTTtTQUNmLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7T0FFRztJQUNJLG1DQUFXLEdBQWxCLFVBQThDLE1BQTBCO1FBQ3RFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNsQixNQUFNLEVBQUU7Z0JBQ04sWUFBWTtnQkFDWix1QkFBdUI7Z0JBQ3ZCLFNBQVM7Z0JBQ1QsU0FBUztnQkFDVCx3QkFBd0I7YUFDekI7WUFDRCxHQUFHLEVBQUUsNkJBQTZCO1lBQ2xDLE1BQU0sRUFBRSxPQUFPO1lBQ2YsTUFBTSxFQUFFLE1BQU07U0FDZixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSSxtQ0FBVyxHQUFsQixVQUFtQixNQUEwQjtRQUMzQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDbEIsTUFBTSxFQUFFLENBQUMsWUFBWSxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUM7WUFDckUsR0FBRyxFQUFFLDZCQUE2QjtZQUNsQyxNQUFNLEVBQUUsUUFBUTtZQUNoQixNQUFNLEVBQUUsTUFBTTtTQUNmLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7T0FFRztJQUNJLGtDQUFVLEdBQWpCLFVBQXFELE1BQXlCO1FBQzVFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNsQixNQUFNLEVBQUU7Z0JBQ04sWUFBWTtnQkFDWix1QkFBdUI7Z0JBQ3ZCLFNBQVM7Z0JBQ1QsaUJBQWlCO2dCQUNqQixxQkFBcUI7Z0JBQ3JCLG9CQUFvQjtnQkFDcEIsd0JBQXdCO2FBQ3pCO1lBQ0QsR0FBRyxFQUFFLCtCQUErQjtZQUNwQyxNQUFNLEVBQUUsTUFBTTtZQUNkLE1BQU0sRUFBRSxNQUFNO1NBQ2YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOzs7T0FHRztJQUNJLGdDQUFRLEdBQWYsVUFBaUQsTUFBZ0M7UUFDL0UsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ2xCLE1BQU0sRUFBRTtnQkFDTixZQUFZO2dCQUNaLHVCQUF1QjtnQkFDdkIsU0FBUztnQkFDVCxTQUFTO2dCQUNULGlCQUFpQjtnQkFDakIscUJBQXFCO2dCQUNyQixvQkFBb0I7Z0JBQ3BCLHdCQUF3QjthQUN6QjtZQUNELEdBQUcsRUFBRSw2QkFBNkI7WUFDbEMsTUFBTSxFQUFFLE1BQU07WUFDZCxNQUFNLEVBQUUsTUFBTTtTQUNmLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7O09BR0c7SUFDSSxvQ0FBWSxHQUFuQixVQUFxRCxNQUEyQjtRQUM5RSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDbEIsTUFBTSxFQUFFO2dCQUNOLFlBQVk7Z0JBQ1osdUJBQXVCO2dCQUN2QixjQUFjO2dCQUNkLFNBQVM7Z0JBQ1QsU0FBUztnQkFDVCxpQkFBaUI7Z0JBQ2pCLHFCQUFxQjtnQkFDckIsb0JBQW9CO2FBQ3JCO1lBQ0QsR0FBRyxFQUFFLGlDQUFpQztZQUN0QyxNQUFNLEVBQUUsTUFBTTtZQUNkLE1BQU0sRUFBRSxNQUFNO1NBQ2YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUNILG9CQUFDO0FBQUQsQ0FBQyxBQWxJRCxDQUFtQyxpQkFBTyxHQWtJekM7QUFsSVksc0NBQWEifQ==