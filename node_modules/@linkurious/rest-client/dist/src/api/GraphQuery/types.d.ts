/**
 * Copyright Linkurious SAS 2012 - 2019
 *
 * - Created on 2019-10-29.
 */
import { GenericObject, IDataSourceParams, IGetSubGraphParams } from '../commonTypes';
import { LkSubGraph } from '../graphItemTypes';
export declare enum TemplateFieldType {
    NUMBER = "number",
    STRING = "string",
    ENUM = "enum",
    NODE = "node",
    NODE_SET = "nodeset",
    DATE = "date",
    DATE_TIME = "datetime",
    BOOLEAN = "boolean",
    ENV = "env"
}
export interface TemplateField<T extends TemplateFieldType = TemplateFieldType> {
    key: string;
    type: T;
}
export interface NumberTemplate extends TemplateField<TemplateFieldType.NUMBER> {
    options?: {
        default?: number;
        min?: number;
        max?: number;
        placeholder?: string;
    };
}
export interface StringTemplate extends TemplateField<TemplateFieldType.STRING> {
    options?: {
        default?: string;
        placeholder?: string;
    };
}
export declare type EnumValue = string | number | boolean;
export declare type EnumChoices = Array<{
    label: string;
    value: EnumValue;
}>;
export interface EnumTemplate extends TemplateField<TemplateFieldType.ENUM> {
    options: {
        default?: string;
        values: EnumChoices;
    };
}
export interface NodeTemplate extends TemplateField<TemplateFieldType.NODE> {
    options?: {
        categories?: string[];
    };
}
export interface NodesetTemplate extends TemplateField<TemplateFieldType.NODE_SET> {
    options?: {
        categories?: string[];
    };
}
export declare enum DateTemplateFormat {
    TIMESTAMP = "timestamp",
    TIMESTAMP_MS = "timestamp-ms",
    ISO = "iso",
    ISO_YYYY_MM_DD = "yyyy-mm-dd",
    DD_MM_YYYY = "dd/mm/yyyy",
    MM_DD_YYYY = "mm/dd/yyyy",
    NATIVE = "native"
}
export interface DateTemplate extends TemplateField<TemplateFieldType.DATE> {
    options: {
        default?: string;
        min?: string;
        max?: string;
        format: DateTemplateFormat;
    };
}
export declare enum EnvTemplateValues {
    EMAIL = "email"
}
export interface EnvTemplate extends TemplateField<TemplateFieldType.ENV> {
    options: {
        value: EnvTemplateValues;
    };
}
export declare enum DatetimeTemplateFormat {
    TIMESTAMP = "timestamp",
    TIMESTAMP_MS = "timestamp-ms",
    ISO = "iso",
    YYYY_MM_DD_T = "YYYY-MM-DDThh:mm:ss",
    NATIVE = "native"
}
export interface DatetimeTemplate extends TemplateField<TemplateFieldType.DATE_TIME> {
    options: {
        default?: string;
        min?: string;
        max?: string;
        timezone?: string;
        format: DatetimeTemplateFormat;
    };
}
export interface BooleanTemplate extends TemplateField<TemplateFieldType.BOOLEAN> {
    options?: {
        default?: boolean;
    };
}
export declare type Template = NumberTemplate | StringTemplate | EnumTemplate | NodeTemplate | NodesetTemplate | DateTemplate | DatetimeTemplate | BooleanTemplate | EnvTemplate;
export declare enum GraphQueryInputType {
    NONE = "none",
    _1_NODE = "1-node",
    _2_NODES = "2-nodes",
    NODESET = "nodeset"
}
export declare enum GraphQueryDialect {
    CYPHER = "cypher",
    GREMLIN = "gremlin"
}
export declare enum GraphQuerySharingMode {
    PRIVATE = "private",
    SOURCE = "source",
    GROUPS = "groups"
}
export declare enum GraphQueryRight {
    OWNER = "owner",
    READ = "read"
}
export declare enum GraphQueryType {
    STATIC = "static",
    TEMPLATE = "template"
}
export interface GraphQuery {
    id: number;
    sourceKey: string;
    name: string;
    content: string;
    dialect: GraphQueryDialect;
    description: string;
    sharing: GraphQuerySharingMode;
    sharedWithGroups?: number[];
    write: boolean;
    graphInput?: GraphQueryInputType;
    templateFields?: Template[];
    type: GraphQueryType;
    right: GraphQueryRight;
    builtin: boolean;
    createdAt?: string;
    updatedAt?: string;
}
export interface IGetQueryParams extends IDataSourceParams {
    id: number;
}
export interface IGetQueriesParams extends IDataSourceParams {
    type: GraphQueryType;
}
export interface ICreateQueryParams extends IDataSourceParams {
    name: string;
    content: string;
    dialect?: GraphQueryDialect;
    description?: string;
    sharing: GraphQuerySharingMode;
    sharedWithGroups?: number[];
}
export interface IUpdateQueryParams extends Partial<ICreateQueryParams> {
    id: number;
}
export interface IDeleteQueryParams extends IDataSourceParams {
    id: number;
}
export interface ICheckQueryParams extends IDataSourceParams {
    query: string;
    dialect?: GraphQueryDialect;
}
export interface CheckQueryResponse {
    write: boolean;
    type: GraphQueryType;
    graphInput?: GraphQueryInputType;
    templateFields?: Template[];
}
export interface IRunQueryParams extends IDataSourceParams {
    dialect?: GraphQueryDialect;
    limit?: number;
    timeout?: number;
    templateData?: GenericObject;
}
export interface IRunQueryByContentParams extends IGetSubGraphParams, IRunQueryParams {
    query: string;
}
export interface RunQueryResponse extends LkSubGraph {
    truncatedByLimit: boolean;
    truncatedByAccess: boolean;
}
export interface IRunQueryByIdParams extends IGetSubGraphParams, IRunQueryParams {
    id: number;
}
export interface ErrorHighlight {
    offset: number;
    length?: number;
}
