/**
 * Copyright Linkurious SAS 2012 - 2019
 *
 * - Created on 2019-10-29.
 */
import { Request } from '../../http/request';
import { CheckQueryResponse, GraphQuery, ICheckQueryParams, ICreateQueryParams, IDeleteQueryParams, IGetQueriesParams, IGetQueryParams, IRunQueryByContentParams, IRunQueryByIdParams, IUpdateQueryParams, RunQueryResponse } from './types';
export * from './types';
export declare class GraphQueryAPI extends Request {
    /**
     * Get a graph query owned by the current user or shared with it.
     */
    getQuery(this: Request<GraphQuery>, params: IGetQueryParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").GuestDisabledError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").NotFoundError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<GraphQuery>>;
    /**
     * Get all the graph queries owned by the current user or shared with it.
     */
    getQueries(this: Request<GraphQuery[]>, params: IGetQueriesParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").GuestDisabledError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<GraphQuery[]>>;
    /**
     * Create a graph query for the current user.
     */
    createQuery(this: Request<GraphQuery>, params: ICreateQueryParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").MalformedQueryTemplateError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<GraphQuery>>;
    /**
     * Update a graph query owned by the current user.
     */
    updateQuery(this: Request<GraphQuery>, params: IUpdateQueryParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").NotFoundError> | import("../../http/response").Response<import("../../http/response").MalformedQueryTemplateError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<GraphQuery>>;
    /**
     * Delete a graph query owned by the current user.
     */
    deleteQuery(params: IDeleteQueryParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").NotFoundError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<undefined>>;
    /**
     * Check that the given graph query is syntactically correct. Parse the query if it's a template.
     */
    checkQuery(this: Request<CheckQueryResponse>, params: ICheckQueryParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").BadGraphRequestError> | import("../../http/response").Response<import("../../http/response").GraphRequestTimeoutError> | import("../../http/response").Response<import("../../http/response").ConstraintViolationError> | import("../../http/response").Response<import("../../http/response").MalformedQueryTemplateError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<CheckQueryResponse>>;
    /**
     * Get all the nodes and edges matching the given graph query.
     * A subgraph made of all the nodes and the edges from each subgraph matching the graph query is returned.
     */
    runQuery(this: Request<RunQueryResponse>, params: IRunQueryByContentParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").NotFoundError> | import("../../http/response").Response<import("../../http/response").BadGraphRequestError> | import("../../http/response").Response<import("../../http/response").GraphRequestTimeoutError> | import("../../http/response").Response<import("../../http/response").ConstraintViolationError> | import("../../http/response").Response<import("../../http/response").MalformedQueryTemplateError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<RunQueryResponse>>;
    /**
     * Get all the nodes and edges matching the given saved graph query by id.
     * A subgraph made of all the nodes and the edges from each subgraph matching the graph query is returned.
     */
    runQueryById(this: Request<RunQueryResponse>, params: IRunQueryByIdParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").GuestDisabledError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").NotFoundError> | import("../../http/response").Response<import("../../http/response").BadGraphRequestError> | import("../../http/response").Response<import("../../http/response").GraphRequestTimeoutError> | import("../../http/response").Response<import("../../http/response").ConstraintViolationError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<RunQueryResponse>>;
}
