"use strict";
/**
 * Copyright Linkurious SAS 2012 - 2019
 *
 * - Created on 2019-10-30.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var request_1 = require("../../http/request");
var response_1 = require("../../http/response");
__export(require("./types"));
var UNAUTHORIZED = response_1.LkErrorKey.UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE = response_1.LkErrorKey.DATA_SOURCE_UNAVAILABLE, GUEST_DISABLED = response_1.LkErrorKey.GUEST_DISABLED, NOT_FOUND = response_1.LkErrorKey.NOT_FOUND, FOLDER_DELETION_FAILED = response_1.LkErrorKey.FOLDER_DELETION_FAILED, ALREADY_EXISTS = response_1.LkErrorKey.ALREADY_EXISTS, VISUALIZATION_LOCKED = response_1.LkErrorKey.VISUALIZATION_LOCKED;
var VisualizationAPI = /** @class */ (function (_super) {
    __extends(VisualizationAPI, _super);
    function VisualizationAPI() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get the number of visualizations for the current user in this data-source.
     */
    VisualizationAPI.prototype.getVisualizationCount = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, GUEST_DISABLED],
            url: '/:sourceKey/visualizations/count',
            method: 'GET',
            params: params
        });
    };
    /**
     * Get a visualization by id.
     */
    VisualizationAPI.prototype.getVisualization = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, NOT_FOUND],
            url: '/:sourceKey/visualizations/:id',
            method: 'GET',
            params: params
        });
    };
    /**
     * Create a new visualization.
     */
    VisualizationAPI.prototype.createVisualization = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE],
            url: '/:sourceKey/visualizations',
            method: 'POST',
            params: params
        });
    };
    /**
     * Duplicate a visualization. Return the id of the copy.
     */
    VisualizationAPI.prototype.duplicateVisualization = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, NOT_FOUND],
            url: '/:sourceKey/visualizations/:id/duplicate',
            method: 'POST',
            params: params
        });
    };
    /**
     * Delete the visualization selected by id.
     */
    VisualizationAPI.prototype.deleteVisualization = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, NOT_FOUND],
            url: '/:sourceKey/visualizations/:id',
            method: 'DELETE',
            params: params
        });
    };
    /**
     * Update the visualization selected by id.
     */
    VisualizationAPI.prototype.updateVisualization = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, NOT_FOUND, VISUALIZATION_LOCKED],
            url: '/:sourceKey/visualizations/:id',
            method: 'PATCH',
            params: params
        });
    };
    /**
     * Get all visualizations shared with the current user.
     */
    VisualizationAPI.prototype.getSharedVisualizations = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE],
            url: '/:sourceKey/visualizations/shared',
            method: 'GET',
            params: params
        });
    };
    /**
     * Create a visualization folder.
     */
    VisualizationAPI.prototype.createVisualizationFolder = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, ALREADY_EXISTS],
            url: '/:sourceKey/visualizations/folder',
            method: 'POST',
            params: params
        });
    };
    /**
     * Update a visualization folder.
     */
    VisualizationAPI.prototype.updateVisualizationFolder = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, NOT_FOUND, ALREADY_EXISTS],
            url: '/:sourceKey/visualizations/folder/:id',
            method: 'PATCH',
            params: params
        });
    };
    /**
     * Delete a visualization folder.
     */
    VisualizationAPI.prototype.deleteVisualizationFolder = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, NOT_FOUND, FOLDER_DELETION_FAILED],
            url: '/:sourceKey/visualizations/folder/:id',
            method: 'DELETE',
            params: params
        });
    };
    /**
     * Get the visualizations and the visualization folders in a tree structure.
     */
    VisualizationAPI.prototype.getVisualizationTree = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE],
            url: '/:sourceKey/visualizations/tree',
            method: 'GET',
            params: params
        });
    };
    /**
     * Get the visualization sandbox of the current user for a given data-source.
     */
    VisualizationAPI.prototype.getSandbox = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, GUEST_DISABLED, NOT_FOUND],
            url: '/:sourceKey/sandbox',
            method: 'GET',
            params: params
        });
    };
    /**
     * Update the sandbox of the current user for a given data-source.
     */
    VisualizationAPI.prototype.updateSandbox = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE],
            url: '/:sourceKey/sandbox',
            method: 'PATCH',
            params: params
        });
    };
    /**
     * Get all share rights on a visualization.
     */
    VisualizationAPI.prototype.getVisualizationShares = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, NOT_FOUND],
            url: '/:sourceKey/visualizations/:id/shares',
            method: 'GET',
            params: params
        });
    };
    /**
     * Set the share right of a user on a visualization.
     */
    VisualizationAPI.prototype.shareVisualization = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, NOT_FOUND],
            url: "/:sourceKey/visualizations/:id/share/:userId",
            method: 'PUT',
            params: params
        });
    };
    /**
     * Remove a share right of a user on a visualization.
     */
    VisualizationAPI.prototype.unshareVisualization = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, NOT_FOUND],
            url: "/:sourceKey/visualizations/:id/share/:userId",
            method: 'DELETE',
            params: params
        });
    };
    /**
     * Get a visualization widget's data by key.
     */
    VisualizationAPI.prototype.getWidget = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, NOT_FOUND],
            url: '/widget/:widgetKey',
            method: 'GET',
            params: params
        });
    };
    /**
     * Create a widget for a visualization. Return the widget key.
     */
    VisualizationAPI.prototype.createWidget = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE],
            url: '/widget',
            method: 'POST',
            params: params
        });
    };
    /**
     * Update the widget of a visualization. Return the widget key.
     */
    VisualizationAPI.prototype.updateWidget = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, NOT_FOUND],
            url: '/widget',
            method: 'PUT',
            params: params
        });
    };
    /**
     * Delete the widget of a visualization.
     */
    VisualizationAPI.prototype.deleteWidget = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, NOT_FOUND],
            url: '/widget/:widgetKey',
            method: 'DELETE',
            params: params
        });
    };
    return VisualizationAPI;
}(request_1.Request));
exports.VisualizationAPI = VisualizationAPI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpL1Zpc3VhbGl6YXRpb24vaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7O0dBSUc7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVILDhDQUEyQztBQUMzQyxnREFBK0M7QUFnQy9DLDZCQUF3QjtBQUd0QixJQUFBLGlEQUFZLEVBQ1osdUVBQXVCLEVBQ3ZCLHFEQUFjLEVBQ2QsMkNBQVMsRUFDVCxxRUFBc0IsRUFDdEIscURBQWMsRUFDZCxpRUFBb0IsQ0FDUDtBQUVmO0lBQXNDLG9DQUFPO0lBQTdDOztJQStQQSxDQUFDO0lBOVBDOztPQUVHO0lBQ0ksZ0RBQXFCLEdBQTVCLFVBQW9ELE1BQTBCO1FBQzVFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNsQixNQUFNLEVBQUUsQ0FBQyxZQUFZLEVBQUUsdUJBQXVCLEVBQUUsY0FBYyxDQUFDO1lBQy9ELEdBQUcsRUFBRSxrQ0FBa0M7WUFDdkMsTUFBTSxFQUFFLEtBQUs7WUFDYixNQUFNLEVBQUUsTUFBTTtTQUNmLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7T0FFRztJQUNJLDJDQUFnQixHQUF2QixVQUErRCxNQUErQjtRQUM1RixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDbEIsTUFBTSxFQUFFLENBQUMsWUFBWSxFQUFFLHVCQUF1QixFQUFFLFNBQVMsQ0FBQztZQUMxRCxHQUFHLEVBQUUsZ0NBQWdDO1lBQ3JDLE1BQU0sRUFBRSxLQUFLO1lBQ2IsTUFBTSxFQUFFLE1BQU07U0FDZixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSSw4Q0FBbUIsR0FBMUIsVUFBeUQsTUFBa0M7UUFDekYsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ2xCLE1BQU0sRUFBRSxDQUFDLFlBQVksRUFBRSx1QkFBdUIsQ0FBQztZQUMvQyxHQUFHLEVBQUUsNEJBQTRCO1lBQ2pDLE1B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