/**
 * Copyright Linkurious SAS 2012 - 2019
 *
 * - Created on 2019-10-30.
 */
import { Request } from '../../http/request';
import { IDataSourceParams } from '../commonTypes';
import { IGetVisualizationParams, ICreateVisualizationParams, IDuplicateVisualizationParams, DuplicateVisualizationResponse, IDeleteVisualizationParams, IUpdateVisualizationParams, GetSharedVisualizationsResponse, ICreateVisualizationFolderParams, IUpdateVisualizationFolderParams, IDeleteVisualizationFolderParams, VisualizationTree, IGetSandboxParams, IUpdateSandboxParams, IGetVisualizationSharesParams, GetVisualizationSharesResponse, IShareVisualizationParams, IUnshareVisualizationParams, IGetWidgetParams, ICreateWidgetParams, IUpdateWidgetParams, IDeleteWidgetParams, VisualizationShare, Visualization, VisualizationFolder, Widget, PopulatedVisualization } from './types';
export * from './types';
export declare class VisualizationAPI extends Request {
    /**
     * Get the number of visualizations for the current user in this data-source.
     */
    getVisualizationCount(this: Request<number>, params?: IDataSourceParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").GuestDisabledError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<number>>;
    /**
     * Get a visualization by id.
     */
    getVisualization(this: Request<PopulatedVisualization>, params: IGetVisualizationParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").NotFoundError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<PopulatedVisualization>>;
    /**
     * Create a new visualization.
     */
    createVisualization(this: Request<Visualization>, params: ICreateVisualizationParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<Visualization>>;
    /**
     * Duplicate a visualization. Return the id of the copy.
     */
    duplicateVisualization(this: Request<DuplicateVisualizationResponse>, params: IDuplicateVisualizationParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").NotFoundError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<DuplicateVisualizationResponse>>;
    /**
     * Delete the visualization selected by id.
     */
    deleteVisualization(params: IDeleteVisualizationParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").NotFoundError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<undefined>>;
    /**
     * Update the visualization selected by id.
     */
    updateVisualization(params: IUpdateVisualizationParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").NotFoundError> | import("../../http/response").Response<import("../../http/response").VisualizationLockedError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<undefined>>;
    /**
     * Get all visualizations shared with the current user.
     */
    getSharedVisualizations(this: Request<GetSharedVisualizationsResponse>, params?: IDataSourceParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<GetSharedVisualizationsResponse>>;
    /**
     * Create a visualization folder.
     */
    createVisualizationFolder(this: Request<VisualizationFolder>, params: ICreateVisualizationFolderParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").AlreadyExistsError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<VisualizationFolder>>;
    /**
     * Update a visualization folder.
     */
    updateVisualizationFolder(this: Request<VisualizationFolder>, params: IUpdateVisualizationFolderParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").NotFoundError> | import("../../http/response").Response<import("../../http/response").AlreadyExistsError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<VisualizationFolder>>;
    /**
     * Delete a visualization folder.
     */
    deleteVisualizationFolder(params: IDeleteVisualizationFolderParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").NotFoundError> | import("../../http/response").Response<import("../../http/response").FolderDeletionFailedError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<undefined>>;
    /**
     * Get the visualizations and the visualization folders in a tree structure.
     */
    getVisualizationTree(this: Request<VisualizationTree>, params?: IDataSourceParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<VisualizationTree>>;
    /**
     * Get the visualization sandbox of the current user for a given data-source.
     */
    getSandbox(this: Request<PopulatedVisualization>, params?: IGetSandboxParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").GuestDisabledError> | import("../../http/response").Response<import("../../http/response").NotFoundError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<PopulatedVisualization>>;
    /**
     * Update the sandbox of the current user for a given data-source.
     */
    updateSandbox(params: IUpdateSandboxParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<undefined>>;
    /**
     * Get all share rights on a visualization.
     */
    getVisualizationShares(this: Request<GetVisualizationSharesResponse>, params: IGetVisualizationSharesParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").NotFoundError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<GetVisualizationSharesResponse>>;
    /**
     * Set the share right of a user on a visualization.
     */
    shareVisualization(this: Request<VisualizationShare>, params: IShareVisualizationParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").NotFoundError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<VisualizationShare>>;
    /**
     * Remove a share right of a user on a visualization.
     */
    unshareVisualization(params: IUnshareVisualizationParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").NotFoundError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<undefined>>;
    /**
     * Get a visualization widget's data by key.
     */
    getWidget(this: Request<Widget>, params: IGetWidgetParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").NotFoundError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<Widget>>;
    /**
     * Create a widget for a visualization. Return the widget key.
     */
    createWidget(this: Request<string>, params: ICreateWidgetParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<string>>;
    /**
     * Update the widget of a visualization. Return the widget key.
     */
    updateWidget(this: Request<string>, params: IUpdateWidgetParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").NotFoundError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<string>>;
    /**
     * Delete the widget of a visualization.
     */
    deleteWidget(params: IDeleteWidgetParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").NotFoundError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<undefined>>;
}
