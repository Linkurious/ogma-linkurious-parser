/**
 * Copyright Linkurious SAS 2012 - 2019
 *
 * - Created on 2019-10-30.
 */
import { Request } from '../../http/request';
import { LkNode, LkNodeStatistics, LkSubGraph } from '../graphItemTypes';
import { IDataSourceParams } from '../commonTypes';
import { ICreateNodeParams, IDeleteNodeParams, IGetAdjacentNodesParams, IGetNodeParams, IGetStatisticsParams, IUpdateNodeParams } from './types';
export * from './types';
export declare class GraphNodeAPI extends Request {
    /**
     * Get a node of the graph.
     * A subgraph made of the single node is returned.
     */
    getNode(this: Request<LkSubGraph>, params: IGetNodeParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").GuestDisabledError> | import("../../http/response").Response<import("../../http/response").NotFoundError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<LkSubGraph>>;
    /**
     * Add a node to the graph.
     */
    createNode(this: Request<LkNode>, params: ICreateNodeParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<LkNode>>;
    /**
     * Update a subset of properties and categories of a node.
     * Keep every other property and category of the node unchanged.
     */
    updateNode(this: Request<LkNode>, params: IUpdateNodeParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").NotFoundError> | import("../../http/response").Response<import("../../http/response").EditConflictError> | import("../../http/response").Response<import("../../http/response").NotSupportedError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<LkNode>>;
    /**
     * Delete a node and its adjacent edges from the graph.
     */
    deleteNode(params: IDeleteNodeParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").NotFoundError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<undefined>>;
    /**
     * Get the number of nodes in the graph.
     */
    getNodeCount(this: Request<number>, params?: IDataSourceParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").GuestDisabledError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<number>>;
    /**
     * Get the digest (the number of adjacent nodes and edges grouped by node categories and edge types)
     * and/or the degree of a given subset of nodes.
     * You can't get aggregated statistics of a subset of nodes containing one or more supernodes.
     * To get the statistics of a supernode invoke the API with only its node ID.
     */
    getStatistics(this: Request<LkNodeStatistics>, params: IGetStatisticsParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").GuestDisabledError> | import("../../http/response").Response<import("../../http/response").NotFoundError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<LkNodeStatistics>>;
    /**
     * Get all the adjacent nodes and edges to one or more source nodes.
     * A subgraph made of the items that matched the expand query and the edges between them is returned.
     */
    getAdjacentNodes(this: Request<LkSubGraph>, params: IGetAdjacentNodesParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").GuestDisabledError> | import("../../http/response").Response<import("../../http/response").NotFoundError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<LkSubGraph>>;
}
