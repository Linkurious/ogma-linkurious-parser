"use strict";
/**
 * Copyright Linkurious SAS 2012 - 2019
 *
 * - Created on 2019-10-30.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var request_1 = require("../../http/request");
var response_1 = require("../../http/response");
__export(require("./types"));
var UNAUTHORIZED = response_1.LkErrorKey.UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE = response_1.LkErrorKey.DATA_SOURCE_UNAVAILABLE, GUEST_DISABLED = response_1.LkErrorKey.GUEST_DISABLED, FORBIDDEN = response_1.LkErrorKey.FORBIDDEN, NOT_FOUND = response_1.LkErrorKey.NOT_FOUND, EDIT_CONFLICT = response_1.LkErrorKey.EDIT_CONFLICT, NOT_SUPPORTED = response_1.LkErrorKey.NOT_SUPPORTED;
var GraphNodeAPI = /** @class */ (function (_super) {
    __extends(GraphNodeAPI, _super);
    function GraphNodeAPI() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get a node of the graph.
     * A subgraph made of the single node is returned.
     */
    GraphNodeAPI.prototype.getNode = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, GUEST_DISABLED, NOT_FOUND],
            url: '/:sourceKey/graph/nodes/:id',
            method: 'POST',
            params: params
        });
    };
    /**
     * Add a node to the graph.
     */
    GraphNodeAPI.prototype.createNode = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, FORBIDDEN],
            url: '/:sourceKey/graph/nodes',
            method: 'POST',
            params: params
        });
    };
    /**
     * Update a subset of properties and categories of a node.
     * Keep every other property and category of the node unchanged.
     */
    GraphNodeAPI.prototype.updateNode = function (params) {
        return this.request({
            errors: [
                UNAUTHORIZED,
                DATA_SOURCE_UNAVAILABLE,
                FORBIDDEN,
                NOT_FOUND,
                EDIT_CONFLICT,
                NOT_SUPPORTED
            ],
            url: '/:sourceKey/graph/nodes/:id',
            method: 'PATCH',
            params: params
        });
    };
    /**
     * Delete a node and its adjacent edges from the graph.
     */
    GraphNodeAPI.prototype.deleteNode = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, FORBIDDEN, NOT_FOUND],
            url: '/:sourceKey/graph/nodes/:id',
            method: 'DELETE',
            params: params
        });
    };
    /**
     * Get the number of nodes in the graph.
     */
    GraphNodeAPI.prototype.getNodeCount = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, GUEST_DISABLED],
            url: '/:sourceKey/graph/nodes/count',
            method: 'GET',
            params: params
        });
    };
    /**
     * Get the digest (the number of adjacent nodes and edges grouped by node categories and edge types)
     * and/or the degree of a given subset of nodes.
     * You can't get aggregated statistics of a subset of nodes containing one or more supernodes.
     * To get the statistics of a supernode invoke the API with only its node ID.
     */
    GraphNodeAPI.prototype.getStatistics = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, GUEST_DISABLED, NOT_FOUND],
            url: '/:sourceKey/graph/neighborhood/statistics',
            method: 'POST',
            params: params
        });
    };
    /**
     * Get all the adjacent nodes and edges to one or more source nodes.
     * A subgraph made of the items that matched the expand query and the edges between them is returned.
     */
    GraphNodeAPI.prototype.getAdjacentNodes = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, GUEST_DISABLED, NOT_FOUND],
            url: '/:sourceKey/graph/nodes/expand',
            method: 'POST',
            params: params
        });
    };
    return GraphNodeAPI;
}(request_1.Request));
exports.GraphNodeAPI = GraphNodeAPI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpL0dyYXBoTm9kZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7R0FJRzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUgsOENBQTJDO0FBQzNDLGdEQUErQztBQWEvQyw2QkFBd0I7QUFHdEIsSUFBQSxpREFBWSxFQUNaLHVFQUF1QixFQUN2QixxREFBYyxFQUNkLDJDQUFTLEVBQ1QsMkNBQVMsRUFDVCxtREFBYSxFQUNiLG1EQUFhLENBQ0E7QUFFZjtJQUFrQyxnQ0FBTztJQUF6Qzs7SUFpR0EsQ0FBQztJQWhHQzs7O09BR0c7SUFDSSw4QkFBTyxHQUFkLFVBQTBDLE1BQXNCO1FBQzlELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNsQixNQUFNLEVBQUUsQ0FBQyxZQUFZLEVBQUUsdUJBQXVCLEVBQUUsY0FBYyxFQUFFLFNBQVMsQ0FBQztZQUMxRSxHQUFHLEVBQUUsNkJBQTZCO1lBQ2xDLE1BQU0sRUFBRSxNQUFNO1lBQ2QsTUFBTSxFQUFFLE1BQU07U0FDZixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSSxpQ0FBVSxHQUFqQixVQUF5QyxNQUF5QjtRQUNoRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDbEIsTUFBTSxFQUFFLENBQUMsWUFBWSxFQUFFLHVCQUF1QixFQUFFLFNBQVMsQ0FBQztZQUMxRCxHQUFHLEVBQUUseUJBQXlCO1lBQzlCLE1BQU0sRUFBRSxNQUFNO1lBQ2QsTUFBTSxFQUFFLE1BQU07U0FDZixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksaUNBQVUsR0FBakIsVUFBeUMsTUFBeUI7UUFDaEUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ2xCLE1BQU0sRUFBRTtnQkFDTixZQUFZO2dCQUNaLHVCQUF1QjtnQkFDdkIsU0FBUztnQkFDVCxTQUFTO2dCQUNULGFBQWE7Z0JBQ2IsYUFBYTthQUNkO1lBQ0QsR0FBRyxFQUFFLDZCQUE2QjtZQUNsQyxNQUFNLEVBQUUsT0FBTztZQUNmLE1BQU0sRUFBRSxNQUFNO1NBQ2YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOztPQUVHO0lBQ0ksaUNBQVUsR0FBakIsVUFBa0IsTUFBeUI7UUFDekMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ2xCLE1BQU0sRUFBRSxDQUFDLFlBQVksRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFDO1lBQ3JFLEdBQUcsRUFBRSw2QkFBNkI7WUFDbEMsTUFBTSxFQUFFLFFBQVE7WUFDaEIsTUFBTSxFQUFFLE1BQU07U0FDZixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSSxtQ0FBWSxHQUFuQixVQUEyQyxNQUEwQjtRQUNuRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDbEIsTUFBTSxFQUFFLENBQUMsWUFBWSxFQUFFLHVCQUF1QixFQUFFLGNBQWMsQ0FBQztZQUMvRCxHQUFHLEVBQUUsK0JBQStCO1lBQ3BDLE1BQU0sRUFBRSxLQUFLO1lBQ2IsTUFBTSxFQUFFLE1BQU07U0FDZixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSxvQ0FBYSxHQUFwQixVQUFzRCxNQUE0QjtRQUNoRixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDbEIsTUFBTSxFQUFFLENBQUMsWUFBWSxFQUFFLHVCQUF1QixFQUFFLGNBQWMsRUFBRSxTQUFTLENBQUM7WUFDMUUsR0FBRyxFQUFFLDJDQUEyQztZQUNoRCxNQUFNLEVBQUUsTUFBTTtZQUNkLE1BQU0sRUFBRSxNQUFNO1NBQ2YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOzs7T0FHRztJQUNJLHVDQUFnQixHQUF2QixVQUFtRCxNQUErQjtRQUNoRixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDbEIsTUFBTSxFQUFFLENBQUMsWUFBWSxFQUFFLHVCQUF1QixFQUFFLGNBQWMsRUFBRSxTQUFTLENBQUM7WUFDMUUsR0FBRyxFQUFFLGdDQUFnQztZQUNyQyxNQUFNLEVBQUUsTUFBTTtZQUNkLE1BQU0sRUFBRSxNQUFNO1NBQ2YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUNILG1CQUFDO0FBQUQsQ0FBQyxBQWpHRCxDQUFrQyxpQkFBTyxHQWlHeEM7QUFqR1ksb0NBQVkifQ==