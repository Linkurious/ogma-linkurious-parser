/**
 * Copyright Linkurious SAS 2012 - 2019
 *
 * - Created on 2019-10-30.
 */
import { Request } from '../../http/request';
import { IDataSourceParams } from '../commonTypes';
import { Group, GroupName, ICreateGroupParams, ICreateUserParams, IDeleteGroupParams, IDeleteUserParams, IGetGroupNamesParams, IGetGroupParams, IGetUserParams, IMergeUsersParams, ISearchUsersParams, IUpdateGroupParams, IUpdateUserParams, SearchUserResponse, User } from './types';
export * from './types';
export declare class UserAPI extends Request {
    /**
     * Get a user by id.
     */
    getUser(this: Request<User>, params: IGetUserParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").NotFoundError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<User>>;
    /**
     * Get all the users or filter them by username, e-mail or group id.
     */
    searchUsers(this: Request<SearchUserResponse>, params: ISearchUsersParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<SearchUserResponse>>;
    /**
     * Add a new user.
     */
    createUser(this: Request<User>, params: ICreateUserParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").AlreadyExistsError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<User>>;
    /**
     * Update a user.
     */
    updateUser(this: Request<User>, params: IUpdateUserParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").NotFoundError> | import("../../http/response").Response<import("../../http/response").InvalidParameterError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<User>>;
    /**
     * Delete a user.
     */
    deleteUser(params: IDeleteUserParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").NotFoundError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<undefined>>;
    /**
     * Get a group.
     */
    getGroup(this: Request<Group>, params: IGetGroupParams): Promise<import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").NotFoundError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<Group>>;
    /**
     * Get all the groups within a data-source.
     */
    getGroups(this: Request<Group[]>, params?: IDataSourceParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<Group[]>>;
    /**
     * Get the names of groups that can perform a given action on the data-source.
     */
    getGroupNames(this: Request<GroupName[]>, params: IGetGroupNamesParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<Pick<Group, "sourceKey" | "name" | "id">[]>>;
    /**
     * Add a new group.
     */
    createGroup(this: Request<Group>, params: ICreateGroupParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").AlreadyExistsError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<Group>>;
    /**
     * Rename a group.
     */
    updateGroup(this: Request<Group>, params: IUpdateGroupParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").NotFoundError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<Group>>;
    /**
     * Delete a group.
     */
    deleteGroup(params: IDeleteGroupParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").NotFoundError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<undefined>>;
    /**
     * Transfer all the visualizations, queries and custom actions from a source user to a target user.
     */
    mergeUsers(params: IMergeUsersParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<undefined>>;
}
