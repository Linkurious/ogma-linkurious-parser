"use strict";
/**
 * Copyright Linkurious SAS 2012 - 2019
 *
 * - Created on 2019-10-30.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var response_1 = require("../../http/response");
var request_1 = require("../../http/request");
__export(require("./types"));
var UNAUTHORIZED = response_1.LkErrorKey.UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE = response_1.LkErrorKey.DATA_SOURCE_UNAVAILABLE, FORBIDDEN = response_1.LkErrorKey.FORBIDDEN, NOT_FOUND = response_1.LkErrorKey.NOT_FOUND, ALREADY_EXISTS = response_1.LkErrorKey.ALREADY_EXISTS, INVALID_PARAMETER = response_1.LkErrorKey.INVALID_PARAMETER;
var UserAPI = /** @class */ (function (_super) {
    __extends(UserAPI, _super);
    function UserAPI() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get a user by id.
     */
    UserAPI.prototype.getUser = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, FORBIDDEN, NOT_FOUND],
            url: '/admin/users/:id',
            method: 'GET',
            params: params
        });
    };
    /**
     * Get all the users or filter them by username, e-mail or group id.
     */
    UserAPI.prototype.searchUsers = function (params) {
        return this.request({ errors: [UNAUTHORIZED], url: '/users', method: 'GET', params: params });
    };
    /**
     * Add a new user.
     */
    UserAPI.prototype.createUser = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, FORBIDDEN, ALREADY_EXISTS],
            url: '/admin/users',
            method: 'POST',
            params: params
        });
    };
    /**
     * Update a user.
     */
    UserAPI.prototype.updateUser = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, FORBIDDEN, NOT_FOUND, INVALID_PARAMETER],
            url: '/admin/users/:id',
            method: 'PATCH',
            params: params
        });
    };
    /**
     * Delete a user.
     */
    UserAPI.prototype.deleteUser = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, FORBIDDEN, NOT_FOUND],
            url: '/admin/users/:id',
            method: 'DELETE',
            params: params
        });
    };
    /**
     * Get a group.
     */
    UserAPI.prototype.getGroup = function (params) {
        return this.request({
            errors: [DATA_SOURCE_UNAVAILABLE, FORBIDDEN, NOT_FOUND],
            url: '/admin/:sourceKey/groups/:id',
            method: 'PATCH',
            params: params
        });
    };
    /**
     * Get all the groups within a data-source.
     */
    UserAPI.prototype.getGroups = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, FORBIDDEN],
            url: '/admin/:sourceKey/groups',
            method: 'GET',
            params: params
        });
    };
    /**
     * Get the names of groups that can perform a given action on the data-source.
     */
    UserAPI.prototype.getGroupNames = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE],
            url: '/:sourceKey/groups',
            method: 'GET',
            params: params
        });
    };
    /**
     * Add a new group.
     */
    UserAPI.prototype.createGroup = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, FORBIDDEN, ALREADY_EXISTS],
            url: '/admin/:sourceKey/groups',
            method: 'POST',
            params: params
        });
    };
    /**
     * Rename a group.
     */
    UserAPI.prototype.updateGroup = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, FORBIDDEN, NOT_FOUND],
            url: '/admin/:sourceKey/groups/:id',
            method: 'PATCH',
            params: params
        });
    };
    /**
     * Delete a group.
     */
    UserAPI.prototype.deleteGroup = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, FORBIDDEN, NOT_FOUND],
            url: '/admin/:sourceKey/groups/:id',
            method: 'DELETE',
            params: params
        });
    };
    /**
     * Transfer all the visualizations, queries and custom actions from a source user to a target user.
     */
    UserAPI.prototype.mergeUsers = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, FORBIDDEN],
            url: '/admin/users/mergeUsers',
            method: 'POST',
            params: params
        });
    };
    return UserAPI;
}(request_1.Request));
exports.UserAPI = UserAPI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpL1VzZXIvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7O0dBSUc7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVILGdEQUErQztBQUMvQyw4Q0FBMkM7QUFxQjNDLDZCQUF3QjtBQUd0QixJQUFBLGlEQUFZLEVBQ1osdUVBQXVCLEVBQ3ZCLDJDQUFTLEVBQ1QsMkNBQVMsRUFDVCxxREFBYyxFQUNkLDJEQUFpQixDQUNKO0FBRWY7SUFBNkIsMkJBQU87SUFBcEM7O0lBMklBLENBQUM7SUExSUM7O09BRUc7SUFDSSx5QkFBTyxHQUFkLFVBQW9DLE1BQXNCO1FBQ3hELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNsQixNQUFNLEVBQUUsQ0FBQyxZQUFZLEVBQUUsU0FBUyxFQUFFLFNBQVMsQ0FBQztZQUM1QyxHQUFHLEVBQUUsa0JBQWtCO1lBQ3ZCLE1BQU0sRUFBRSxLQUFLO1lBQ2IsTUFBTSxFQUFFLE1BQU07U0FDZixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSSw2QkFBVyxHQUFsQixVQUFzRCxNQUEwQjtRQUM5RSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBQyxNQUFNLEVBQUUsQ0FBQyxZQUFZLENBQUMsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBQyxDQUFDLENBQUM7SUFDOUYsQ0FBQztJQUVEOztPQUVHO0lBQ0ksNEJBQVUsR0FBakIsVUFBdUMsTUFBeUI7UUFDOUQsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ2xCLE1BQU0sRUFBRSxDQUFDLFlBQVksRUFBRSxTQUFTLEVBQUUsY0FBYyxDQUFDO1lBQ2pELEdBQUcsRUFBRSxjQUFjO1lBQ25CLE1BQU0sRUFBRSxNQUFNO1lBQ2QsTUFBTSxFQUFFLE1BQU07U0FDZixDQUFDLENBQUM7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