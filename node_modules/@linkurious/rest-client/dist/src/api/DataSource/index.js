"use strict";
/**
 * Copyright Linkurious SAS 2012 - 2019
 *
 * - Created on 2019-10-24.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var request_1 = require("../../http/request");
var response_1 = require("../../http/response");
var utils_1 = require("../../utils");
var index_1 = require("../../index");
__export(require("./types"));
var UNAUTHORIZED = response_1.LkErrorKey.UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE = response_1.LkErrorKey.DATA_SOURCE_UNAVAILABLE, GUEST_DISABLED = response_1.LkErrorKey.GUEST_DISABLED, FORBIDDEN = response_1.LkErrorKey.FORBIDDEN, ILLEGAL_SOURCE_STATE = response_1.LkErrorKey.ILLEGAL_SOURCE_STATE;
var DataSourceAPI = /** @class */ (function (_super) {
    __extends(DataSourceAPI, _super);
    function DataSourceAPI() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get the status of all the data-sources.
     * Users can only see data-sources with at least one group belonging to that data-source.
     * If a user has the "admin.connect" access right, it can also see all the disconnected
     * data-sources.
     */
    DataSourceAPI.prototype.getDataSources = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var response, currentSource;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.request({
                            errors: [UNAUTHORIZED, GUEST_DISABLED],
                            url: '/dataSources',
                            method: 'GET',
                            params: params
                        })];
                    case 1:
                        response = _a.sent();
                        if (response.isSuccess()) {
                            this.props.clientState.sources = response.body;
                            if (!utils_1.hasValue(this.props.clientState.currentSource)) {
                                try {
                                    currentSource = index_1.RestClient.getCurrentSource(this.props.clientState.sources || [], this.props.clientState.user && { userId: this.props.clientState.user.id });
                                    this.props.clientState.currentSource = currentSource;
                                    if (utils_1.hasValue(currentSource.key) && utils_1.hasValue(this.props.clientState.user)) {
                                        localStorage.setItem('lk-lastSeenSourceKey-' + this.props.clientState.user.id, currentSource.key);
                                    }
                                }
                                catch (_) {
                                    // Silently fail if localStorage is not supported or if there are no sources configured
                                }
                            }
                        }
                        return [2 /*return*/, response];
                }
            });
        });
    };
    /**
     * Set default design styles and/or captions for the given data-source.
     */
    DataSourceAPI.prototype.setDefaultSourceStyles = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, FORBIDDEN],
            url: '/admin/source/:sourceKey/setDefaults',
            method: 'POST',
            params: params
        });
    };
    /**
     * Reset design and/or captions of all sandboxes of the given data-source to default values.
     * If `design` is true, set `design.palette` and `design.styles` to default `palette` and `defaultStyles` of the data-source.
     * If `captions` is true, set `nodeFields.captions` and `edgeFields.captions` to current `defaultCaptions.nodes` and `defaultCaptions.edges` of the data-source.
     */
    DataSourceAPI.prototype.resetSourceStyles = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, FORBIDDEN],
            url: '/admin/source/:sourceKey/resetDefaults',
            method: 'POST',
            params: params
        });
    };
    /**
     * Connect a disconnected data-source.
     */
    DataSourceAPI.prototype.connectDataSource = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, FORBIDDEN],
            url: '/admin/source/:sourceIndex/connect',
            method: 'POST',
            params: params
        });
    };
    /**
     * Delete all data of data-source (visualizations, access rights, widgets, full-text indexes).
     * Optionally merge visualizations and widgets into another data-source instead of deleting them.
     * Warning: when merging into another data-source, visualizations may break if node and edge IDs are not the same in the target data-source.
     */
    DataSourceAPI.prototype.deleteSourceData = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, FORBIDDEN],
            url: '/admin/sources/data/:sourceKey',
            method: 'DELETE',
            params: params
        });
    };
    /**
     * Delete a data-source configuration that has currently no connected data-source.
     */
    DataSourceAPI.prototype.deleteSourceConfig = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, FORBIDDEN, ILLEGAL_SOURCE_STATE],
            url: '/admin/sources/config/:configIndex',
            method: 'DELETE',
            params: params
        });
    };
    /**
     * Get the admin info of all the data-sources, including:
     * - a disconnected data-source configuration
     * - a disconnected data-source state not configured anymore
     * - a connected data-source (data-source configuration + state)
     */
    DataSourceAPI.prototype.getDataSourcesAdminInfo = function () {
        return this.request({
            errors: [UNAUTHORIZED, FORBIDDEN],
            url: '/admin/sources',
            method: 'GET'
        });
    };
    /**
     * Create a new data-source configuration made of a graph database configuration
     * and an index configuration. Return the configuration index of the new data-source.
     */
    DataSourceAPI.prototype.createSourceConfig = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, FORBIDDEN],
            url: '/admin/sources/config',
            method: 'POST',
            params: params
        });
    };
    return DataSourceAPI;
}(request_1.Request));
exports.DataSourceAPI = DataSourceAPI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpL0RhdGFTb3VyY2UvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7O0dBSUc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVILDhDQUEyQztBQUMzQyxnREFBK0M7QUFFL0MscUNBQXFDO0FBQ3JDLHFDQUF1QztBQWN2Qyw2QkFBd0I7QUFHdEIsSUFBQSxpREFBWSxFQUNaLHVFQUF1QixFQUN2QixxREFBYyxFQUNkLDJDQUFTLEVBQ1QsaUVBQW9CLENBQ1A7QUFFZjtJQUFtQyxpQ0FBTztJQUExQzs7SUF3SUEsQ0FBQztJQXZJQzs7Ozs7T0FLRztJQUNVLHNDQUFjLEdBQTNCLFVBRUUsTUFBb0M7Ozs7OzRCQUVuQixxQkFBTSxJQUFJLENBQUMsT0FBTyxDQUFDOzRCQUNsQyxNQUFNLEVBQUUsQ0FBQyxZQUFZLEVBQUUsY0FBYyxDQUFDOzRCQUN0QyxHQUFHLEVBQUUsY0FBYzs0QkFDbkIsTUFBTSxFQUFFLEtBQUs7NEJBQ2IsTUFBTSxFQUFFLE1BQU07eUJBQ2YsQ0FBQyxFQUFBOzt3QkFMSSxRQUFRLEdBQUcsU0FLZjt3QkFFRixJQUFJLFFBQVEsQ0FBQyxTQUFTLEVBQUUsRUFBRTs0QkFDeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUM7NEJBRS9DLElBQUksQ0FBQyxnQkFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxFQUFFO2dDQUNuRCxJQUFJO29DQUNJLGFBQWEsR0FBRyxrQkFBVSxDQUFDLGdCQUFnQixDQUMvQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxPQUFPLElBQUksRUFBRSxFQUNwQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLElB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