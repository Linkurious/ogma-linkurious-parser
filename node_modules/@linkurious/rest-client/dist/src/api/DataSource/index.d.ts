/**
 * Copyright Linkurious SAS 2012 - 2019
 *
 * - Created on 2019-10-24.
 */
import { Request } from '../../http/request';
import { SelectedDataSourceConfig } from '../Config';
import { IConnectDataSourceParams, IGetDataSourcesStatusParams, IResetSourceStylesParams, ISetDefaultSourceStylesParams, DataSourceUserInfo, IDeleteSourceDataParams, DeleteSourceDataResponse, IDeleteSourceConfigParams, DataSourceAdminInfo } from './types';
export * from './types';
export declare class DataSourceAPI extends Request {
    /**
     * Get the status of all the data-sources.
     * Users can only see data-sources with at least one group belonging to that data-source.
     * If a user has the "admin.connect" access right, it can also see all the disconnected
     * data-sources.
     */
    getDataSources(this: Request<DataSourceUserInfo[]>, params?: IGetDataSourcesStatusParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").GuestDisabledError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<DataSourceUserInfo[]>>;
    /**
     * Set default design styles and/or captions for the given data-source.
     */
    setDefaultSourceStyles(params: ISetDefaultSourceStylesParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<undefined>>;
    /**
     * Reset design and/or captions of all sandboxes of the given data-source to default values.
     * If `design` is true, set `design.palette` and `design.styles` to default `palette` and `defaultStyles` of the data-source.
     * If `captions` is true, set `nodeFields.captions` and `edgeFields.captions` to current `defaultCaptions.nodes` and `defaultCaptions.edges` of the data-source.
     */
    resetSourceStyles(params: IResetSourceStylesParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<undefined>>;
    /**
     * Connect a disconnected data-source.
     */
    connectDataSource(params: IConnectDataSourceParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<undefined>>;
    /**
     * Delete all data of data-source (visualizations, access rights, widgets, full-text indexes).
     * Optionally merge visualizations and widgets into another data-source instead of deleting them.
     * Warning: when merging into another data-source, visualizations may break if node and edge IDs are not the same in the target data-source.
     */
    deleteSourceData(this: Request<DeleteSourceDataResponse>, params: IDeleteSourceDataParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<DeleteSourceDataResponse>>;
    /**
     * Delete a data-source configuration that has currently no connected data-source.
     */
    deleteSourceConfig(params: IDeleteSourceConfigParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").IllegalSourceStateError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<undefined>>;
    /**
     * Get the admin info of all the data-sources, including:
     * - a disconnected data-source configuration
     * - a disconnected data-source state not configured anymore
     * - a connected data-source (data-source configuration + state)
     */
    getDataSourcesAdminInfo(this: Request<DataSourceAdminInfo[]>): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<DataSourceAdminInfo[]>>;
    /**
     * Create a new data-source configuration made of a graph database configuration
     * and an index configuration. Return the configuration index of the new data-source.
     */
    createSourceConfig(this: Request<number>, params: SelectedDataSourceConfig): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<number>>;
}
