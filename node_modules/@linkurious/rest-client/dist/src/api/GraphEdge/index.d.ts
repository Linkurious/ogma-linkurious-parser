/**
 * Copyright Linkurious SAS 2012 - 2019
 *
 * - Created on 2019-10-30.
 */
import { Request } from '../../http/request';
import { LkEdge, LkSubGraph } from '../graphItemTypes';
import { IDataSourceParams } from '../commonTypes';
import { ICreateEdgeParams, IDeleteEdgeParams, IGetEdgeParams, IUpdateEdgeParams } from './types';
export * from './types';
export declare class GraphEdgeAPI extends Request {
    /**
     * Get an edge of the graph.
     * A subgraph made of the edge and its extremities is returned.
     */
    getEdge(this: Request<LkSubGraph>, params: IGetEdgeParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").GuestDisabledError> | import("../../http/response").Response<import("../../http/response").NotFoundError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<LkSubGraph>>;
    /**
     * Add an edge to the graph.
     */
    createEdge(this: Request<LkEdge>, params: ICreateEdgeParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<LkEdge>>;
    /**
     * Update a subset of properties of an edge.
     * Keep every other property of the edge unchanged.
     * It's not possible to update the type of an edge.
     */
    updateEdge(this: Request<LkEdge>, params: IUpdateEdgeParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").NotFoundError> | import("../../http/response").Response<import("../../http/response").EditConflictError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<LkEdge>>;
    /**
     * Delete an edge from the graph.
     */
    deleteEdge(params: IDeleteEdgeParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").ForbiddenError> | import("../../http/response").Response<import("../../http/response").NotFoundError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<undefined>>;
    /**
     * Get the number of edges in the graph.
     */
    getEdgeCount(this: Request<number>, params?: IDataSourceParams): Promise<import("../../http/response").Response<import("../../http/response").UnauthorizedError> | import("../../http/response").Response<import("../../http/response").DataSourceUnavailableError> | import("../../http/response").Response<import("../../http/response").GuestDisabledError> | import("../../http/response").Response<import("../../http/response").ConnectionRefusedError> | import("../../http/response").Response<number>>;
}
