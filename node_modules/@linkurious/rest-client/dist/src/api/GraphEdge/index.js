"use strict";
/**
 * Copyright Linkurious SAS 2012 - 2019
 *
 * - Created on 2019-10-30.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var request_1 = require("../../http/request");
var response_1 = require("../../http/response");
var UNAUTHORIZED = response_1.LkErrorKey.UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE = response_1.LkErrorKey.DATA_SOURCE_UNAVAILABLE, GUEST_DISABLED = response_1.LkErrorKey.GUEST_DISABLED, FORBIDDEN = response_1.LkErrorKey.FORBIDDEN, NOT_FOUND = response_1.LkErrorKey.NOT_FOUND, EDIT_CONFLICT = response_1.LkErrorKey.EDIT_CONFLICT;
var GraphEdgeAPI = /** @class */ (function (_super) {
    __extends(GraphEdgeAPI, _super);
    function GraphEdgeAPI() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get an edge of the graph.
     * A subgraph made of the edge and its extremities is returned.
     */
    GraphEdgeAPI.prototype.getEdge = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, GUEST_DISABLED, NOT_FOUND],
            url: '/:sourceKey/graph/edges/:id',
            method: 'POST',
            params: params
        });
    };
    /**
     * Add an edge to the graph.
     */
    GraphEdgeAPI.prototype.createEdge = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, FORBIDDEN],
            url: '/:sourceKey/graph/edges',
            method: 'POST',
            params: params
        });
    };
    /**
     * Update a subset of properties of an edge.
     * Keep every other property of the edge unchanged.
     * It's not possible to update the type of an edge.
     */
    GraphEdgeAPI.prototype.updateEdge = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, FORBIDDEN, NOT_FOUND, EDIT_CONFLICT],
            url: '/:sourceKey/graph/edges/:id',
            method: 'PATCH',
            params: params
        });
    };
    /**
     * Delete an edge from the graph.
     */
    GraphEdgeAPI.prototype.deleteEdge = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, FORBIDDEN, NOT_FOUND],
            url: '/:sourceKey/graph/edges/:id',
            method: 'DELETE',
            params: params
        });
    };
    /**
     * Get the number of edges in the graph.
     */
    GraphEdgeAPI.prototype.getEdgeCount = function (params) {
        return this.request({
            errors: [UNAUTHORIZED, DATA_SOURCE_UNAVAILABLE, GUEST_DISABLED],
            url: '/:sourceKey/graph/edges/count',
            method: 'GET',
            params: params
        });
    };
    return GraphEdgeAPI;
}(request_1.Request));
exports.GraphEdgeAPI = GraphEdgeAPI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpL0dyYXBoRWRnZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7R0FJRzs7Ozs7Ozs7Ozs7Ozs7O0FBRUgsOENBQTJDO0FBQzNDLGdEQUErQztBQVM3QyxJQUFBLGlEQUFZLEVBQ1osdUVBQXVCLEVBQ3ZCLHFEQUFjLEVBQ2QsMkNBQVMsRUFDVCwyQ0FBUyxFQUNULG1EQUFhLENBQ0E7QUFFZjtJQUFrQyxnQ0FBTztJQUF6Qzs7SUErREEsQ0FBQztJQTlEQzs7O09BR0c7SUFDSSw4QkFBTyxHQUFkLFVBQTBDLE1BQXNCO1FBQzlELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNsQixNQUFNLEVBQUUsQ0FBQyxZQUFZLEVBQUUsdUJBQXVCLEVBQUUsY0FBYyxFQUFFLFNBQVMsQ0FBQztZQUMxRSxHQUFHLEVBQUUsNkJBQTZCO1lBQ2xDLE1BQU0sRUFBRSxNQUFNO1lBQ2QsTUFBTSxFQUFFLE1BQU07U0FDZixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSSxpQ0FBVSxHQUFqQixVQUF5QyxNQUF5QjtRQUNoRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDbEIsTUFBTSxFQUFFLENBQUMsWUFBWSxFQUFFLHVCQUF1QixFQUFFLFNBQVMsQ0FBQztZQUMxRCxHQUFHLEVBQUUseUJBQXlCO1lBQzlCLE1BQU0sRUFBRSxNQUFNO1lBQ2QsTUFBTSxFQUFFLE1BQU07U0FDZixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLGlDQUFVLEdBQWpCLFVBQXlDLE1BQXlCO1FBQ2hFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNsQixNQUFNLEVBQUUsQ0FBQyxZQUFZLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxhQUFhLENBQUM7WUFDcEYsR0FBRyxFQUFFLDZCQUE2QjtZQUNsQyxNQUFNLEVBQUUsT0FBTztZQUNmLE1BQU0sRUFBRSxNQUFNO1NBQ2YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOztPQUVHO0lBQ0ksaUNBQVUsR0FBakIsVUFBa0IsTUFBeUI7UUFDekMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ2xCLE1BQU0sRUFBRSxDQUFDLFlBQVksRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFDO1lBQ3JFLEdBQUcsRUFBRSw2QkFBNkI7WUFDbEMsTUFBTSxFQUFFLFFBQVE7WUFDaEIsTUFBTSxFQUFFLE1BQU07U0FDZixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSSxtQ0FBWSxHQUFuQixVQUEyQyxNQUEwQjtRQUNuRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDbEIsTUFBTSxFQUFFLENBQUMsWUFBWSxFQUFFLHVCQUF1QixFQUFFLGNBQWMsQ0FBQztZQUMvRCxHQUFHLEVBQUUsK0JBQStCO1lBQ3BDLE1BQU0sRUFBRSxLQUFLO1lBQ2IsTUFBTSxFQUFFLE1BQU07U0FDZixDQUFDLENBQUM7SUFDTCxDQUFDO0lBQ0gsbUJBQUM7QUFBRCxDQUFDLEFBL0RELENBQWtDLGlCQUFPLEdBK0R4QztBQS9EWSxvQ0FBWSJ9