"use strict";
/**
 * Copyright Linkurious SAS 2012 - 2019
 *
 * - Created on 2019-12-05.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var mocha_1 = require("mocha");
var chai_1 = require("chai");
var src_1 = require("../src");
var request_1 = require("../src/http/request");
mocha_1.describe('Rest Client', function () {
    mocha_1.it('Should find the correct data-source by index', function () {
        var sources = [
            { configIndex: 0, connected: false },
            { configIndex: 1, connected: true },
            { configIndex: 3, connected: true }
        ];
        chai_1.assert.deepEqual(
        //@ts-ignore partial interface for sources
        src_1.RestClient.getCurrentSource(sources, { configIndex: 0 }), sources[0]);
        chai_1.assert.deepEqual(
        //@ts-ignore partial interface for sources
        src_1.RestClient.getCurrentSource(sources, { configIndex: 1 }), sources[1]);
        chai_1.assert.deepEqual(
        //@ts-ignore partial interface for sources
        src_1.RestClient.getCurrentSource(sources, { configIndex: 3 }), sources[2]);
        chai_1.assert.deepEqual(
        //@ts-ignore partial interface for sources
        src_1.RestClient.getCurrentSource(sources, { configIndex: 5 }), sources[1]);
    });
    mocha_1.it('Should find the correct data-source by user id', function () {
        var sourceByUserId = new Map([
            ['lk-lastSeenSourceKey-1', 's1'],
            ['lk-lastSeenSourceKey-2', 's2'],
            ['lk-lastSeenSourceKey-3', 's3']
        ]);
        var storage = {
            getItem: function (key) { return sourceByUserId.get(key) || null; }
        };
        var sources = [
            { key: 's1', connected: false },
            { key: 's2', connected: true },
            { key: 's3', connected: true }
        ];
        chai_1.assert.deepEqual(
        //@ts-ignore partial interface for sources
        src_1.RestClient.getCurrentSource(sources, { userId: 1 }, storage), sources[1]);
        chai_1.assert.deepEqual(
        //@ts-ignore partial interface for sources
        src_1.RestClient.getCurrentSource(sources, { userId: 2 }, storage), sources[1]);
        chai_1.assert.deepEqual(
        //@ts-ignore partial interface for sources
        src_1.RestClient.getCurrentSource(sources, { userId: 3 }, storage), sources[2]);
        chai_1.assert.deepEqual(
        //@ts-ignore partial interface for sources
        src_1.RestClient.getCurrentSource(sources, { userId: 5 }, storage), sources[1]);
    });
    mocha_1.it('Should find the correct data-source by sourceKey', function () {
        var sources = [
            { key: 's1', connected: false },
            { key: 's2', connected: true },
            { key: 's3', connected: true }
        ];
        chai_1.assert.deepEqual(
        //@ts-ignore partial interface for sources
        src_1.RestClient.getCurrentSource(sources, { sourceKey: 's1' }), sources[0]);
        chai_1.assert.deepEqual(
        //@ts-ignore partial interface for sources
        src_1.RestClient.getCurrentSource(sources, { sourceKey: 's2' }), sources[1]);
        chai_1.assert.deepEqual(
        //@ts-ignore partial interface for sources
        src_1.RestClient.getCurrentSource(sources, { sourceKey: 's3' }), sources[2]);
        chai_1.assert.deepEqual(
        //@ts-ignore partial interface for sources
        src_1.RestClient.getCurrentSource(sources, { sourceKey: 's5' }), sources[1]);
    });
    mocha_1.it('Should render URL correctly', function () {
        chai_1.assert.deepEqual(
        // @ts-ignore private method and incomplete params
        request_1.Request.renderURL({
            url: '/visualizations/:visualizationId/share/:userId',
            params: {
                visualizationId: 1,
                userId: 2
            }
        }).url, '/visualizations/1/share/2');
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzdENsaWVudC5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vdGVzdC9yZXN0Q2xpZW50LnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7O0dBSUc7O0FBRUgsK0JBQW1DO0FBQ25DLDZCQUE0QjtBQUU1Qiw4QkFBa0M7QUFDbEMsK0NBQTRDO0FBRTVDLGdCQUFRLENBQUMsYUFBYSxFQUFFO0lBQ3RCLFVBQUUsQ0FBQyw4Q0FBOEMsRUFBRTtRQUNqRCxJQUFNLE9BQU8sR0FBRztZQUNkLEVBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFDO1lBQ2xDLEVBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFDO1lBQ2pDLEVBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFDO1NBQ2xDLENBQUM7UUFFRixhQUFNLENBQUMsU0FBUztRQUNkLDBDQUEwQztRQUMxQyxnQkFBVSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxFQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUMsQ0FBQyxFQUN0RCxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQ1gsQ0FBQztRQUVGLGFBQU0sQ0FBQyxTQUFTO1FBQ2QsMENBQTBDO1FBQzFDLGdCQUFVLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLEVBQUMsV0FBVyxFQUFFLENBQUMsRUFBQyxDQUFDLEVBQ3RELE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FDWCxDQUFDO1FBRUYsYUFBTSxDQUFDLFNBQVM7UUFDZCwwQ0FBMEM7UUFDMUMsZ0JBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsRUFBQyxXQUFXLEVBQUUsQ0FBQyxFQUFDLENBQUMsRUFDdEQsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUNYLENBQUM7UUFFRixhQUFNLENBQUMsU0FBUztRQUNkLDBDQUEwQztRQUMxQyxnQkFBVSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxFQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUMsQ0FBQyxFQUN0RCxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQ1gsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0lBRUgsVUFBRSxDQUFDLGdEQUFnRCxFQUFFO1FBQ25ELElBQU0sY0FBYyxHQUFHLElBQUksR0FBRyxDQUFDO1lBQzdCLENBQUMsd0JBQXdCLEVBQUUsSUFBSSxDQUFDO1lBQ2hDLENBQUMsd0JBQXdCLEVBQUUsSUFBSSxDQUFDO1lBQ2hDLENBQUMsd0JBQXdCLEVBQUUsSUFBSSxDQUFDO1NBQ2pDLENBQUMsQ0FBQztRQUVILElBQU0sT0FBTyxHQUFHO1lBQ2QsT0FBTyxFQUFFLFVBQUMsR0FBVyxJQUFLLE9BQUEsY0FBYyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLEVBQS9CLENBQStCO1NBQzFELENBQUM7UUFFRixJQUFNLE9BQU8sR0FBRztZQUNkLEVBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFDO1lBQzdCLEVBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFDO1lBQzVCLEVBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFDO1NBQzdCLENBQUM7UUFFRixhQUFNLENBQUMsU0FBUztRQUNkLDBDQUEwQztRQUMxQyxnQkFBVSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxFQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUMsRUFBRSxPQUFPLENBQUMsRUFDMUQsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUNYLENBQUM7UUFFRixhQUFNLENBQUMsU0FBUztRQUNkLDBDQUEwQztRQUMxQyxnQkFBVSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxFQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUMsRUFBRSxPQUFPLENBQUMsRUFDMUQsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUNYLENBQUM7UUFFRixhQUFNLENBQUMsU0FBUztRQUNkLDBDQUEwQztRQUMxQyxnQkFBVSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxFQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUMsRUFBRSxPQUFPLENBQUMsRUFDMUQsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUNYLENBQUM7UUFFRixhQUFNLENBQUMsU0FBUztRQUNkLDBDQUEwQztRQUMxQyxnQkFBVSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxFQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUMsRUFBRSxPQUFPLENBQUMsRUFDMUQsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUNYLENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztJQUVILFVBQUUsQ0FBQyxrREFBa0QsRUFBRTtRQUNyRCxJQUFNLE9BQU8sR0FBRztZQUNkLEVBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFDO1lBQzdCLEVBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFDO1lBQzVCLEVBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFDO1NBQzdCLENBQUM7UUFFRixhQUFNLENBQUMsU0FBUztRQUNkLDBDQUEwQztRQUMxQyxnQkFBVSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxFQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUMsQ0FBQyxFQUN2RCxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQ1gsQ0FBQztRQUVGLGFBQU0sQ0FBQyxTQUFTO1FBQ2QsMENBQTBDO1FBQzFDLGdCQUFVLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLEVBQUMsU0FBUyxFQUFFLElBQUksRUFBQyxDQUFDLEVBQ3ZELE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FDWCxDQUFDO1FBRUYsYUFBTSxDQUFDLFNBQVM7UUFDZCwwQ0FBMEM7UUFDMUMsZ0JBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsRUFBQyxTQUFTLEVBQUUsSUFBSSxFQUFDLENBQUMsRUFDdkQsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUNYLENBQUM7UUFFRixhQUFNLENBQUMsU0FBUztRQUNkLDBDQUEwQztRQUMxQyxnQkFBVSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxFQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUMsQ0FBQyxFQUN2RCxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQ1gsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0lBRUgsVUFBRSxDQUFDLDZCQUE2QixFQUFFO1FBQ2hDLGFBQU0sQ0FBQyxTQUFTO1FBQ2Qsa0RBQWtEO1FBQ2xELGlCQUFPLENBQUMsU0FBUyxDQUFDO1lBQ2hCLEdBQUcsRUFBRSxnREFBZ0Q7WUFDckQsTUFBTSxFQUFFO2dCQUNOLGVBQWUsRUFBRSxDQUFDO2dCQUNsQixNQUFNLEVBQUUsQ0FBQzthQUNWO1NBQ0YsQ0FBQyxDQUFDLEdBQUcsRUFDTiwyQkFBMkIsQ0FDNUIsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMifQ==